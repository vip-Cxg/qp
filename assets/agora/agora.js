"use strict";
var agora;
(function (agora) {
    var API_TYPE;
    (function (API_TYPE) {
        API_TYPE[API_TYPE["INITIALIZE"] = 0] = "INITIALIZE";
        API_TYPE[API_TYPE["RELEASE"] = 1] = "RELEASE";
        API_TYPE[API_TYPE["SET_CHANNEL_PROFILE"] = 2] = "SET_CHANNEL_PROFILE";
        API_TYPE[API_TYPE["SET_CLIENT_ROLE"] = 3] = "SET_CLIENT_ROLE";
        API_TYPE[API_TYPE["JOIN_CHANNEL"] = 4] = "JOIN_CHANNEL";
        API_TYPE[API_TYPE["SWITCH_CHANNEL"] = 5] = "SWITCH_CHANNEL";
        API_TYPE[API_TYPE["LEAVE_CHANNEL"] = 6] = "LEAVE_CHANNEL";
        API_TYPE[API_TYPE["RE_NEW_TOKEN"] = 7] = "RE_NEW_TOKEN";
        API_TYPE[API_TYPE["REGISTER_LOCAL_USER_ACCOUNT"] = 8] = "REGISTER_LOCAL_USER_ACCOUNT";
        API_TYPE[API_TYPE["JOIN_CHANNEL_WITH_USER_ACCOUNT"] = 9] = "JOIN_CHANNEL_WITH_USER_ACCOUNT";
        API_TYPE[API_TYPE["GET_USER_INFO_BY_USER_ACCOUNT"] = 10] = "GET_USER_INFO_BY_USER_ACCOUNT";
        API_TYPE[API_TYPE["GET_USER_INFO_BY_UID"] = 11] = "GET_USER_INFO_BY_UID";
        API_TYPE[API_TYPE["START_ECHO_TEST"] = 12] = "START_ECHO_TEST";
        API_TYPE[API_TYPE["START_ECHO_TEST_2"] = 13] = "START_ECHO_TEST_2";
        API_TYPE[API_TYPE["STOP_ECHO_TEST"] = 14] = "STOP_ECHO_TEST";
        API_TYPE[API_TYPE["ENABLE_VIDEO"] = 15] = "ENABLE_VIDEO";
        API_TYPE[API_TYPE["DISABLE_VIDEO"] = 16] = "DISABLE_VIDEO";
        API_TYPE[API_TYPE["SET_VIDEO_PROFILE"] = 17] = "SET_VIDEO_PROFILE";
        API_TYPE[API_TYPE["SET_VIDEO_ENCODER_CONFIGURATION"] = 18] = "SET_VIDEO_ENCODER_CONFIGURATION";
        API_TYPE[API_TYPE["SET_CAMERA_CAPTURER_CONFIGURATION"] = 19] = "SET_CAMERA_CAPTURER_CONFIGURATION";
        API_TYPE[API_TYPE["SET_UP_LOCAL_VIDEO"] = 20] = "SET_UP_LOCAL_VIDEO";
        API_TYPE[API_TYPE["SET_UP_REMOTE_VIDEO"] = 21] = "SET_UP_REMOTE_VIDEO";
        API_TYPE[API_TYPE["START_PREVIEW"] = 22] = "START_PREVIEW";
        API_TYPE[API_TYPE["SET_REMOTE_USER_PRIORITY"] = 23] = "SET_REMOTE_USER_PRIORITY";
        API_TYPE[API_TYPE["STOP_PREVIEW"] = 24] = "STOP_PREVIEW";
        API_TYPE[API_TYPE["ENABLE_AUDIO"] = 25] = "ENABLE_AUDIO";
        API_TYPE[API_TYPE["ENABLE_LOCAL_AUDIO"] = 26] = "ENABLE_LOCAL_AUDIO";
        API_TYPE[API_TYPE["DISABLE_AUDIO"] = 27] = "DISABLE_AUDIO";
        API_TYPE[API_TYPE["SET_AUDIO_PROFILE"] = 28] = "SET_AUDIO_PROFILE";
        API_TYPE[API_TYPE["MUTE_LOCAL_AUDIO_STREAM"] = 29] = "MUTE_LOCAL_AUDIO_STREAM";
        API_TYPE[API_TYPE["MUTE_ALL_REMOTE_AUDIO_STREAMS"] = 30] = "MUTE_ALL_REMOTE_AUDIO_STREAMS";
        API_TYPE[API_TYPE["SET_DEFAULT_MUTE_ALL_REMOTE_AUDIO_STREAMS"] = 31] = "SET_DEFAULT_MUTE_ALL_REMOTE_AUDIO_STREAMS";
        API_TYPE[API_TYPE["ADJUST_USER_PLAYBACK_SIGNAL_VOLUME"] = 32] = "ADJUST_USER_PLAYBACK_SIGNAL_VOLUME";
        API_TYPE[API_TYPE["MUTE_REMOTE_AUDIO_STREAM"] = 33] = "MUTE_REMOTE_AUDIO_STREAM";
        API_TYPE[API_TYPE["MUTE_LOCAL_VIDEO_STREAM"] = 34] = "MUTE_LOCAL_VIDEO_STREAM";
        API_TYPE[API_TYPE["ENABLE_LOCAL_VIDEO"] = 35] = "ENABLE_LOCAL_VIDEO";
        API_TYPE[API_TYPE["MUTE_ALL_REMOTE_VIDEO_STREAMS"] = 36] = "MUTE_ALL_REMOTE_VIDEO_STREAMS";
        API_TYPE[API_TYPE["SET_DEFAULT_MUTE_ALL_REMOTE_VIDEO_STREAMS"] = 37] = "SET_DEFAULT_MUTE_ALL_REMOTE_VIDEO_STREAMS";
        API_TYPE[API_TYPE["MUTE_REMOTE_VIDEO_STREAM"] = 38] = "MUTE_REMOTE_VIDEO_STREAM";
        API_TYPE[API_TYPE["SET_REMOTE_VIDEO_STREAM_TYPE"] = 39] = "SET_REMOTE_VIDEO_STREAM_TYPE";
        API_TYPE[API_TYPE["SET_REMOTE_DEFAULT_VIDEO_STREAM_TYPE"] = 40] = "SET_REMOTE_DEFAULT_VIDEO_STREAM_TYPE";
        API_TYPE[API_TYPE["ENABLE_AUDIO_VOLUME_INDICATION"] = 41] = "ENABLE_AUDIO_VOLUME_INDICATION";
        API_TYPE[API_TYPE["START_AUDIO_RECORDING"] = 42] = "START_AUDIO_RECORDING";
        API_TYPE[API_TYPE["START_AUDIO_RECORDING2"] = 43] = "START_AUDIO_RECORDING2";
        API_TYPE[API_TYPE["STOP_AUDIO_RECORDING"] = 44] = "STOP_AUDIO_RECORDING";
        API_TYPE[API_TYPE["ENABLE_FACE_DETECTION"] = 62] = "ENABLE_FACE_DETECTION";
        API_TYPE[API_TYPE["SET_REMOTE_VOICE_POSITIONN"] = 73] = "SET_REMOTE_VOICE_POSITIONN";
        API_TYPE[API_TYPE["SET_LOG_FILE"] = 79] = "SET_LOG_FILE";
        API_TYPE[API_TYPE["SET_LOG_FILTER"] = 80] = "SET_LOG_FILTER";
        API_TYPE[API_TYPE["SET_LOG_FILE_SIZE"] = 81] = "SET_LOG_FILE_SIZE";
        API_TYPE[API_TYPE["SET_LOCAL_RENDER_MODE"] = 82] = "SET_LOCAL_RENDER_MODE";
        API_TYPE[API_TYPE["SET_LOCAL_RENDER_MODE_2"] = 83] = "SET_LOCAL_RENDER_MODE_2";
        API_TYPE[API_TYPE["SET_REMOTE_RENDER_MODE"] = 84] = "SET_REMOTE_RENDER_MODE";
        API_TYPE[API_TYPE["SET_REMOTE_RENDER_MODE_2"] = 85] = "SET_REMOTE_RENDER_MODE_2";
        API_TYPE[API_TYPE["SET_LOCAL_VIDEO_MIRROR_MODE"] = 86] = "SET_LOCAL_VIDEO_MIRROR_MODE";
        API_TYPE[API_TYPE["ENABLE_DUAL_STREAM_MODE"] = 87] = "ENABLE_DUAL_STREAM_MODE";
        API_TYPE[API_TYPE["ADJUST_RECORDING_SIGNAL_VOLUME"] = 93] = "ADJUST_RECORDING_SIGNAL_VOLUME";
        API_TYPE[API_TYPE["ADJUST_PLAYBACK_SIGNAL_VOLUME"] = 94] = "ADJUST_PLAYBACK_SIGNAL_VOLUME";
        API_TYPE[API_TYPE["ENABLE_WEB_SDK_INTEROPER_ABILITY"] = 95] = "ENABLE_WEB_SDK_INTEROPER_ABILITY";
        API_TYPE[API_TYPE["SET_VIDEO_QUALITY_PARAMETERS"] = 96] = "SET_VIDEO_QUALITY_PARAMETERS";
        API_TYPE[API_TYPE["SET_LOCAL_PUBLISH_FALLBACK_OPTION"] = 97] = "SET_LOCAL_PUBLISH_FALLBACK_OPTION";
        API_TYPE[API_TYPE["SET_REMOTE_SUBSCRIBE_FALLBACK_OPTION"] = 98] = "SET_REMOTE_SUBSCRIBE_FALLBACK_OPTION";
        API_TYPE[API_TYPE["SWITCH_CAMERA"] = 99] = "SWITCH_CAMERA";
        API_TYPE[API_TYPE["SWITCH_CAMERA_2"] = 100] = "SWITCH_CAMERA_2";
        API_TYPE[API_TYPE["SET_DEFAULT_AUDIO_ROUTE_SPEAKER_PHONE"] = 101] = "SET_DEFAULT_AUDIO_ROUTE_SPEAKER_PHONE";
        API_TYPE[API_TYPE["SET_ENABLE_SPEAKER_PHONE"] = 102] = "SET_ENABLE_SPEAKER_PHONE";
        API_TYPE[API_TYPE["ENABLE_IN_EAR_MONITORING"] = 103] = "ENABLE_IN_EAR_MONITORING";
        API_TYPE[API_TYPE["SET_IN_EAR_MONITORING_VOLUME"] = 104] = "SET_IN_EAR_MONITORING_VOLUME";
        API_TYPE[API_TYPE["IS_SPEAKER_PHONE_ENABLED"] = 105] = "IS_SPEAKER_PHONE_ENABLED";
        API_TYPE[API_TYPE["SET_AUDIO_SESSION_OPERATION_RESTRICTION"] = 106] = "SET_AUDIO_SESSION_OPERATION_RESTRICTION";
        API_TYPE[API_TYPE["ENABLE_LOOP_BACK_RECORDING"] = 107] = "ENABLE_LOOP_BACK_RECORDING";
        API_TYPE[API_TYPE["START_SCREEN_CAPTURE_BY_DISPLAY_ID"] = 108] = "START_SCREEN_CAPTURE_BY_DISPLAY_ID";
        API_TYPE[API_TYPE["START_SCREEN_CAPTURE_BY_SCREEN_RECT"] = 109] = "START_SCREEN_CAPTURE_BY_SCREEN_RECT";
        API_TYPE[API_TYPE["START_SCREEN_CAPTURE_BY_WINDOW_ID"] = 110] = "START_SCREEN_CAPTURE_BY_WINDOW_ID";
        API_TYPE[API_TYPE["SET_SCREEN_CAPTURE_CONTENT_HINT"] = 111] = "SET_SCREEN_CAPTURE_CONTENT_HINT";
        API_TYPE[API_TYPE["UPDATE_SCREEN_CAPTURE_PARAMETERS"] = 112] = "UPDATE_SCREEN_CAPTURE_PARAMETERS";
        API_TYPE[API_TYPE["UPDATE_SCREEN_CAPTURE_REGION"] = 113] = "UPDATE_SCREEN_CAPTURE_REGION";
        API_TYPE[API_TYPE["STOP_SCREEN_CAPTURE"] = 114] = "STOP_SCREEN_CAPTURE";
        API_TYPE[API_TYPE["GET_CALL_ID"] = 117] = "GET_CALL_ID";
        API_TYPE[API_TYPE["RATE"] = 118] = "RATE";
        API_TYPE[API_TYPE["COMPLAIN"] = 119] = "COMPLAIN";
        API_TYPE[API_TYPE["GET_VERSION"] = 120] = "GET_VERSION";
        API_TYPE[API_TYPE["ENABLE_LAST_MILE_TEST"] = 121] = "ENABLE_LAST_MILE_TEST";
        API_TYPE[API_TYPE["DISABLE_LAST_MILE_TEST"] = 122] = "DISABLE_LAST_MILE_TEST";
        API_TYPE[API_TYPE["START_LAST_MILE_PROBE_TEST"] = 123] = "START_LAST_MILE_PROBE_TEST";
        API_TYPE[API_TYPE["STOP_LAST_MILE_PROBE_TEST"] = 124] = "STOP_LAST_MILE_PROBE_TEST";
        API_TYPE[API_TYPE["GET_ERROR_DESCRIPTION"] = 125] = "GET_ERROR_DESCRIPTION";
        API_TYPE[API_TYPE["SET_ENCRYPTION_SECTRT"] = 126] = "SET_ENCRYPTION_SECTRT";
        API_TYPE[API_TYPE["SET_ENCRYPTION_MODE"] = 127] = "SET_ENCRYPTION_MODE";
        API_TYPE[API_TYPE["REGISTER_PACKET_OBSERVER"] = 128] = "REGISTER_PACKET_OBSERVER";
        API_TYPE[API_TYPE["CREATE_DATA_STREAM"] = 129] = "CREATE_DATA_STREAM";
        API_TYPE[API_TYPE["SEND_STREAM_MESSAGE"] = 130] = "SEND_STREAM_MESSAGE";
        API_TYPE[API_TYPE["ADD_PUBLISH_STREAM_URL"] = 131] = "ADD_PUBLISH_STREAM_URL";
        API_TYPE[API_TYPE["REMOVE_PUBLISH_STREAM_URL"] = 132] = "REMOVE_PUBLISH_STREAM_URL";
        API_TYPE[API_TYPE["SET_LIVE_TRANSCODING"] = 133] = "SET_LIVE_TRANSCODING";
        API_TYPE[API_TYPE["ADD_VIDEO_WATER_MARK"] = 134] = "ADD_VIDEO_WATER_MARK";
        API_TYPE[API_TYPE["ADD_VIDEO_WATER_MARK_2"] = 135] = "ADD_VIDEO_WATER_MARK_2";
        API_TYPE[API_TYPE["CLEAR_VIDEO_WATER_MARKS"] = 136] = "CLEAR_VIDEO_WATER_MARKS";
        API_TYPE[API_TYPE["SET_BEAUTY_EFFECT_OPTIONS"] = 137] = "SET_BEAUTY_EFFECT_OPTIONS";
        API_TYPE[API_TYPE["ADD_INJECT_STREAM_URL"] = 138] = "ADD_INJECT_STREAM_URL";
        API_TYPE[API_TYPE["START_CHANNEL_MEDIA_RELAY"] = 139] = "START_CHANNEL_MEDIA_RELAY";
        API_TYPE[API_TYPE["UPDATE_CHANNEL_MEDIA_RELAY"] = 140] = "UPDATE_CHANNEL_MEDIA_RELAY";
        API_TYPE[API_TYPE["STOP_CHANNEL_MEDIA_RELAY"] = 141] = "STOP_CHANNEL_MEDIA_RELAY";
        API_TYPE[API_TYPE["REMOVE_INJECT_STREAM_URL"] = 142] = "REMOVE_INJECT_STREAM_URL";
        API_TYPE[API_TYPE["GET_CONNECTION_STATE"] = 143] = "GET_CONNECTION_STATE";
        API_TYPE[API_TYPE["REGISTER_MEDIA_META_DATA_OBSERVER"] = 144] = "REGISTER_MEDIA_META_DATA_OBSERVER";
        API_TYPE[API_TYPE["SET_PARAMETERS"] = 145] = "SET_PARAMETERS";
        API_TYPE[API_TYPE["SET_PLAYBACK_DEVICE_VOLUME"] = 146] = "SET_PLAYBACK_DEVICE_VOLUME";
        API_TYPE[API_TYPE["PUBLISH"] = 147] = "PUBLISH";
        API_TYPE[API_TYPE["UNPUBLISH"] = 148] = "UNPUBLISH";
        API_TYPE[API_TYPE["CHANNEL_ID"] = 149] = "CHANNEL_ID";
        API_TYPE[API_TYPE["SEND_METADATA"] = 150] = "SEND_METADATA";
        API_TYPE[API_TYPE["SET_MAX_META_SIZE"] = 151] = "SET_MAX_META_SIZE";
        API_TYPE[API_TYPE["PUSH_AUDIO_FRAME"] = 152] = "PUSH_AUDIO_FRAME";
        API_TYPE[API_TYPE["PUSH_AUDIO_FRAME_2"] = 153] = "PUSH_AUDIO_FRAME_2";
        API_TYPE[API_TYPE["PULL_AUDIO_FRAME"] = 154] = "PULL_AUDIO_FRAME";
        API_TYPE[API_TYPE["SET_EXTERN_VIDEO_SOURCE"] = 155] = "SET_EXTERN_VIDEO_SOURCE";
        API_TYPE[API_TYPE["PUSH_VIDEO_FRAME"] = 156] = "PUSH_VIDEO_FRAME";
        API_TYPE[API_TYPE["ENABLE_ENCRYPTION"] = 157] = "ENABLE_ENCRYPTION";
        API_TYPE[API_TYPE["SEND_CUSTOM_REPORT_MESSAGE"] = 158] = "SEND_CUSTOM_REPORT_MESSAGE";
    })(API_TYPE = agora.API_TYPE || (agora.API_TYPE = {}));
    var API_TYPE_AUDIO_EFFECT;
    (function (API_TYPE_AUDIO_EFFECT) {
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["START_AUDIO_MIXING"] = 45] = "START_AUDIO_MIXING";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["STOP_AUDIO_MIXING"] = 46] = "STOP_AUDIO_MIXING";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["PAUSE_AUDIO_MIXING"] = 47] = "PAUSE_AUDIO_MIXING";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["RESUME_AUDIO_MIXING"] = 48] = "RESUME_AUDIO_MIXING";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_HIGH_QUALITY_AUDIO_PARAMETERS"] = 49] = "SET_HIGH_QUALITY_AUDIO_PARAMETERS";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["ADJUST_AUDIO_MIXING_VOLUME"] = 50] = "ADJUST_AUDIO_MIXING_VOLUME";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["ADJUST_AUDIO_MIXING_PLAYOUT_VOLUME"] = 51] = "ADJUST_AUDIO_MIXING_PLAYOUT_VOLUME";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["GET_AUDIO_MIXING_PLAYOUT_VOLUME"] = 52] = "GET_AUDIO_MIXING_PLAYOUT_VOLUME";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["ADJUST_AUDIO_MIXING_PUBLISH_VOLUME"] = 53] = "ADJUST_AUDIO_MIXING_PUBLISH_VOLUME";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["GET_AUDIO_MIXING_PUBLISH_VOLUME"] = 54] = "GET_AUDIO_MIXING_PUBLISH_VOLUME";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["GET_AUDIO_MIXING_DURATION"] = 55] = "GET_AUDIO_MIXING_DURATION";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["GET_AUDIO_MIXING_CURRENT_POSITION"] = 56] = "GET_AUDIO_MIXING_CURRENT_POSITION";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_AUDIO_MIXING_POSITION"] = 57] = "SET_AUDIO_MIXING_POSITION";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_AUDIO_MIXING_PITCH"] = 58] = "SET_AUDIO_MIXING_PITCH";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["GET_EFFECTS_VOLUME"] = 59] = "GET_EFFECTS_VOLUME";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_EFFECTS_VOLUME"] = 60] = "SET_EFFECTS_VOLUME";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_VOLUME_OF_EFFECT"] = 61] = "SET_VOLUME_OF_EFFECT";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["PLAY_EFFECT"] = 63] = "PLAY_EFFECT";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["STOP_EFFECT"] = 64] = "STOP_EFFECT";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["STOP_ALL_EFFECTS"] = 65] = "STOP_ALL_EFFECTS";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["PRE_LOAD_EFFECT"] = 66] = "PRE_LOAD_EFFECT";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["UN_LOAD_EFFECT"] = 67] = "UN_LOAD_EFFECT";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["PAUSE_EFFECT"] = 68] = "PAUSE_EFFECT";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["PAUSE_ALL_EFFECTS"] = 69] = "PAUSE_ALL_EFFECTS";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["RESUME_EFFECT"] = 70] = "RESUME_EFFECT";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["RESUME_ALL_EFFECTS"] = 71] = "RESUME_ALL_EFFECTS";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["ENABLE_SOUND_POSITION_INDICATION"] = 72] = "ENABLE_SOUND_POSITION_INDICATION";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_LOCAL_VOICE_PITCH"] = 74] = "SET_LOCAL_VOICE_PITCH";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_LOCAL_VOICE_EQUALIZATION"] = 75] = "SET_LOCAL_VOICE_EQUALIZATION";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_LOCAL_VOICE_REVERB"] = 76] = "SET_LOCAL_VOICE_REVERB";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_LOCAL_VOICE_CHANGER"] = 77] = "SET_LOCAL_VOICE_CHANGER";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_LOCAL_VOICE_REVERB_PRESET"] = 78] = "SET_LOCAL_VOICE_REVERB_PRESET";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_EXTERNAL_AUDIO_SOURCE"] = 88] = "SET_EXTERNAL_AUDIO_SOURCE";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_EXTERNAL_AUDIO_SINK"] = 89] = "SET_EXTERNAL_AUDIO_SINK";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_RECORDING_AUDIO_FRAME_PARAMETERS"] = 90] = "SET_RECORDING_AUDIO_FRAME_PARAMETERS";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_PLAYBACK_AUDIO_FRAME_PARAMETERS"] = 91] = "SET_PLAYBACK_AUDIO_FRAME_PARAMETERS";
        API_TYPE_AUDIO_EFFECT[API_TYPE_AUDIO_EFFECT["SET_MIXED_AUDIO_FRAME_PARAMETERS"] = 92] = "SET_MIXED_AUDIO_FRAME_PARAMETERS";
    })(API_TYPE_AUDIO_EFFECT = agora.API_TYPE_AUDIO_EFFECT || (agora.API_TYPE_AUDIO_EFFECT = {}));
    var MEDIA_DEVICE_STATE_TYPE;
    (function (MEDIA_DEVICE_STATE_TYPE) {
        MEDIA_DEVICE_STATE_TYPE[MEDIA_DEVICE_STATE_TYPE["MEDIA_DEVICE_STATE_ACTIVE"] = 1] = "MEDIA_DEVICE_STATE_ACTIVE";
        MEDIA_DEVICE_STATE_TYPE[MEDIA_DEVICE_STATE_TYPE["MEDIA_DEVICE_STATE_DISABLED"] = 2] = "MEDIA_DEVICE_STATE_DISABLED";
        MEDIA_DEVICE_STATE_TYPE[MEDIA_DEVICE_STATE_TYPE["MEDIA_DEVICE_STATE_NOT_PRESENT"] = 4] = "MEDIA_DEVICE_STATE_NOT_PRESENT";
        MEDIA_DEVICE_STATE_TYPE[MEDIA_DEVICE_STATE_TYPE["MEDIA_DEVICE_STATE_UNPLUGGED"] = 8] = "MEDIA_DEVICE_STATE_UNPLUGGED";
    })(MEDIA_DEVICE_STATE_TYPE = agora.MEDIA_DEVICE_STATE_TYPE || (agora.MEDIA_DEVICE_STATE_TYPE = {}));
    var MEDIA_DEVICE_TYPE;
    (function (MEDIA_DEVICE_TYPE) {
        MEDIA_DEVICE_TYPE[MEDIA_DEVICE_TYPE["UNKNOWN_AUDIO_DEVICE"] = -1] = "UNKNOWN_AUDIO_DEVICE";
        MEDIA_DEVICE_TYPE[MEDIA_DEVICE_TYPE["AUDIO_PLAYOUT_DEVICE"] = 0] = "AUDIO_PLAYOUT_DEVICE";
        MEDIA_DEVICE_TYPE[MEDIA_DEVICE_TYPE["AUDIO_RECORDING_DEVICE"] = 1] = "AUDIO_RECORDING_DEVICE";
        MEDIA_DEVICE_TYPE[MEDIA_DEVICE_TYPE["VIDEO_RENDER_DEVICE"] = 2] = "VIDEO_RENDER_DEVICE";
        MEDIA_DEVICE_TYPE[MEDIA_DEVICE_TYPE["VIDEO_CAPTURE_DEVICE"] = 3] = "VIDEO_CAPTURE_DEVICE";
        MEDIA_DEVICE_TYPE[MEDIA_DEVICE_TYPE["AUDIO_APPLICATION_PLAYOUT_DEVICE"] = 4] = "AUDIO_APPLICATION_PLAYOUT_DEVICE";
    })(MEDIA_DEVICE_TYPE = agora.MEDIA_DEVICE_TYPE || (agora.MEDIA_DEVICE_TYPE = {}));
    var AUDIO_MIXING_STATE_TYPE;
    (function (AUDIO_MIXING_STATE_TYPE) {
        AUDIO_MIXING_STATE_TYPE[AUDIO_MIXING_STATE_TYPE["AUDIO_MIXING_STATE_PLAYING"] = 710] = "AUDIO_MIXING_STATE_PLAYING";
        AUDIO_MIXING_STATE_TYPE[AUDIO_MIXING_STATE_TYPE["AUDIO_MIXING_STATE_PAUSED"] = 711] = "AUDIO_MIXING_STATE_PAUSED";
        AUDIO_MIXING_STATE_TYPE[AUDIO_MIXING_STATE_TYPE["AUDIO_MIXING_STATE_STOPPED"] = 713] = "AUDIO_MIXING_STATE_STOPPED";
        AUDIO_MIXING_STATE_TYPE[AUDIO_MIXING_STATE_TYPE["AUDIO_MIXING_STATE_FAILED"] = 714] = "AUDIO_MIXING_STATE_FAILED";
    })(AUDIO_MIXING_STATE_TYPE = agora.AUDIO_MIXING_STATE_TYPE || (agora.AUDIO_MIXING_STATE_TYPE = {}));
    var AUDIO_MIXING_ERROR_TYPE;
    (function (AUDIO_MIXING_ERROR_TYPE) {
        AUDIO_MIXING_ERROR_TYPE[AUDIO_MIXING_ERROR_TYPE["AUDIO_MIXING_ERROR_CAN_NOT_OPEN"] = 701] = "AUDIO_MIXING_ERROR_CAN_NOT_OPEN";
        AUDIO_MIXING_ERROR_TYPE[AUDIO_MIXING_ERROR_TYPE["AUDIO_MIXING_ERROR_TOO_FREQUENT_CALL"] = 702] = "AUDIO_MIXING_ERROR_TOO_FREQUENT_CALL";
        AUDIO_MIXING_ERROR_TYPE[AUDIO_MIXING_ERROR_TYPE["AUDIO_MIXING_ERROR_INTERRUPTED_EOF"] = 703] = "AUDIO_MIXING_ERROR_INTERRUPTED_EOF";
        AUDIO_MIXING_ERROR_TYPE[AUDIO_MIXING_ERROR_TYPE["AUDIO_MIXING_ERROR_OK"] = 0] = "AUDIO_MIXING_ERROR_OK";
    })(AUDIO_MIXING_ERROR_TYPE = agora.AUDIO_MIXING_ERROR_TYPE || (agora.AUDIO_MIXING_ERROR_TYPE = {}));
    var AUDIO_MIXING_REASON_TYPE;
    (function (AUDIO_MIXING_REASON_TYPE) {
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_CAN_NOT_OPEN"] = 701] = "AUDIO_MIXING_REASON_CAN_NOT_OPEN";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_TOO_FREQUENT_CALL"] = 702] = "AUDIO_MIXING_REASON_TOO_FREQUENT_CALL";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_INTERRUPTED_EOF"] = 703] = "AUDIO_MIXING_REASON_INTERRUPTED_EOF";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_STARTED_BY_USER"] = 720] = "AUDIO_MIXING_REASON_STARTED_BY_USER";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED"] = 721] = "AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_START_NEW_LOOP"] = 722] = "AUDIO_MIXING_REASON_START_NEW_LOOP";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED"] = 723] = "AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_STOPPED_BY_USER"] = 724] = "AUDIO_MIXING_REASON_STOPPED_BY_USER";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_PAUSED_BY_USER"] = 725] = "AUDIO_MIXING_REASON_PAUSED_BY_USER";
        AUDIO_MIXING_REASON_TYPE[AUDIO_MIXING_REASON_TYPE["AUDIO_MIXING_REASON_RESUMED_BY_USER"] = 726] = "AUDIO_MIXING_REASON_RESUMED_BY_USER";
    })(AUDIO_MIXING_REASON_TYPE = agora.AUDIO_MIXING_REASON_TYPE || (agora.AUDIO_MIXING_REASON_TYPE = {}));
    var LOCAL_VIDEO_STREAM_STATE;
    (function (LOCAL_VIDEO_STREAM_STATE) {
        LOCAL_VIDEO_STREAM_STATE[LOCAL_VIDEO_STREAM_STATE["LOCAL_VIDEO_STREAM_STATE_STOPPED"] = 0] = "LOCAL_VIDEO_STREAM_STATE_STOPPED";
        LOCAL_VIDEO_STREAM_STATE[LOCAL_VIDEO_STREAM_STATE["LOCAL_VIDEO_STREAM_STATE_CAPTURING"] = 1] = "LOCAL_VIDEO_STREAM_STATE_CAPTURING";
        LOCAL_VIDEO_STREAM_STATE[LOCAL_VIDEO_STREAM_STATE["LOCAL_VIDEO_STREAM_STATE_ENCODING"] = 2] = "LOCAL_VIDEO_STREAM_STATE_ENCODING";
        LOCAL_VIDEO_STREAM_STATE[LOCAL_VIDEO_STREAM_STATE["LOCAL_VIDEO_STREAM_STATE_FAILED"] = 3] = "LOCAL_VIDEO_STREAM_STATE_FAILED";
    })(LOCAL_VIDEO_STREAM_STATE = agora.LOCAL_VIDEO_STREAM_STATE || (agora.LOCAL_VIDEO_STREAM_STATE = {}));
    var LOCAL_VIDEO_STREAM_ERROR;
    (function (LOCAL_VIDEO_STREAM_ERROR) {
        LOCAL_VIDEO_STREAM_ERROR[LOCAL_VIDEO_STREAM_ERROR["LOCAL_VIDEO_STREAM_ERROR_OK"] = 0] = "LOCAL_VIDEO_STREAM_ERROR_OK";
        LOCAL_VIDEO_STREAM_ERROR[LOCAL_VIDEO_STREAM_ERROR["LOCAL_VIDEO_STREAM_ERROR_FAILURE"] = 1] = "LOCAL_VIDEO_STREAM_ERROR_FAILURE";
        LOCAL_VIDEO_STREAM_ERROR[LOCAL_VIDEO_STREAM_ERROR["LOCAL_VIDEO_STREAM_ERROR_DEVICE_NO_PERMISSION"] = 2] = "LOCAL_VIDEO_STREAM_ERROR_DEVICE_NO_PERMISSION";
        LOCAL_VIDEO_STREAM_ERROR[LOCAL_VIDEO_STREAM_ERROR["LOCAL_VIDEO_STREAM_ERROR_DEVICE_BUSY"] = 3] = "LOCAL_VIDEO_STREAM_ERROR_DEVICE_BUSY";
        LOCAL_VIDEO_STREAM_ERROR[LOCAL_VIDEO_STREAM_ERROR["LOCAL_VIDEO_STREAM_ERROR_CAPTURE_FAILURE"] = 4] = "LOCAL_VIDEO_STREAM_ERROR_CAPTURE_FAILURE";
        LOCAL_VIDEO_STREAM_ERROR[LOCAL_VIDEO_STREAM_ERROR["LOCAL_VIDEO_STREAM_ERROR_ENCODE_FAILURE"] = 5] = "LOCAL_VIDEO_STREAM_ERROR_ENCODE_FAILURE";
        LOCAL_VIDEO_STREAM_ERROR[LOCAL_VIDEO_STREAM_ERROR["LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_MINIMIZED"] = 11] = "LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_MINIMIZED";
    })(LOCAL_VIDEO_STREAM_ERROR = agora.LOCAL_VIDEO_STREAM_ERROR || (agora.LOCAL_VIDEO_STREAM_ERROR = {}));
    var LOCAL_AUDIO_STREAM_STATE;
    (function (LOCAL_AUDIO_STREAM_STATE) {
        LOCAL_AUDIO_STREAM_STATE[LOCAL_AUDIO_STREAM_STATE["LOCAL_AUDIO_STREAM_STATE_STOPPED"] = 0] = "LOCAL_AUDIO_STREAM_STATE_STOPPED";
        LOCAL_AUDIO_STREAM_STATE[LOCAL_AUDIO_STREAM_STATE["LOCAL_AUDIO_STREAM_STATE_RECORDING"] = 1] = "LOCAL_AUDIO_STREAM_STATE_RECORDING";
        LOCAL_AUDIO_STREAM_STATE[LOCAL_AUDIO_STREAM_STATE["LOCAL_AUDIO_STREAM_STATE_ENCODING"] = 2] = "LOCAL_AUDIO_STREAM_STATE_ENCODING";
        LOCAL_AUDIO_STREAM_STATE[LOCAL_AUDIO_STREAM_STATE["LOCAL_AUDIO_STREAM_STATE_FAILED"] = 3] = "LOCAL_AUDIO_STREAM_STATE_FAILED";
    })(LOCAL_AUDIO_STREAM_STATE = agora.LOCAL_AUDIO_STREAM_STATE || (agora.LOCAL_AUDIO_STREAM_STATE = {}));
    var LOCAL_AUDIO_STREAM_ERROR;
    (function (LOCAL_AUDIO_STREAM_ERROR) {
        LOCAL_AUDIO_STREAM_ERROR[LOCAL_AUDIO_STREAM_ERROR["LOCAL_AUDIO_STREAM_ERROR_OK"] = 0] = "LOCAL_AUDIO_STREAM_ERROR_OK";
        LOCAL_AUDIO_STREAM_ERROR[LOCAL_AUDIO_STREAM_ERROR["LOCAL_AUDIO_STREAM_ERROR_FAILURE"] = 1] = "LOCAL_AUDIO_STREAM_ERROR_FAILURE";
        LOCAL_AUDIO_STREAM_ERROR[LOCAL_AUDIO_STREAM_ERROR["LOCAL_AUDIO_STREAM_ERROR_DEVICE_NO_PERMISSION"] = 2] = "LOCAL_AUDIO_STREAM_ERROR_DEVICE_NO_PERMISSION";
        LOCAL_AUDIO_STREAM_ERROR[LOCAL_AUDIO_STREAM_ERROR["LOCAL_AUDIO_STREAM_ERROR_DEVICE_BUSY"] = 3] = "LOCAL_AUDIO_STREAM_ERROR_DEVICE_BUSY";
        LOCAL_AUDIO_STREAM_ERROR[LOCAL_AUDIO_STREAM_ERROR["LOCAL_AUDIO_STREAM_ERROR_RECORD_FAILURE"] = 4] = "LOCAL_AUDIO_STREAM_ERROR_RECORD_FAILURE";
        LOCAL_AUDIO_STREAM_ERROR[LOCAL_AUDIO_STREAM_ERROR["LOCAL_AUDIO_STREAM_ERROR_ENCODE_FAILURE"] = 5] = "LOCAL_AUDIO_STREAM_ERROR_ENCODE_FAILURE";
    })(LOCAL_AUDIO_STREAM_ERROR = agora.LOCAL_AUDIO_STREAM_ERROR || (agora.LOCAL_AUDIO_STREAM_ERROR = {}));
    var AUDIO_RECORDING_QUALITY_TYPE;
    (function (AUDIO_RECORDING_QUALITY_TYPE) {
        AUDIO_RECORDING_QUALITY_TYPE[AUDIO_RECORDING_QUALITY_TYPE["AUDIO_RECORDING_QUALITY_LOW"] = 0] = "AUDIO_RECORDING_QUALITY_LOW";
        AUDIO_RECORDING_QUALITY_TYPE[AUDIO_RECORDING_QUALITY_TYPE["AUDIO_RECORDING_QUALITY_MEDIUM"] = 1] = "AUDIO_RECORDING_QUALITY_MEDIUM";
        AUDIO_RECORDING_QUALITY_TYPE[AUDIO_RECORDING_QUALITY_TYPE["AUDIO_RECORDING_QUALITY_HIGH"] = 2] = "AUDIO_RECORDING_QUALITY_HIGH";
    })(AUDIO_RECORDING_QUALITY_TYPE = agora.AUDIO_RECORDING_QUALITY_TYPE || (agora.AUDIO_RECORDING_QUALITY_TYPE = {}));
    var QUALITY_TYPE;
    (function (QUALITY_TYPE) {
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_UNKNOWN"] = 0] = "QUALITY_UNKNOWN";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_EXCELLENT"] = 1] = "QUALITY_EXCELLENT";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_GOOD"] = 2] = "QUALITY_GOOD";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_POOR"] = 3] = "QUALITY_POOR";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_BAD"] = 4] = "QUALITY_BAD";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_VBAD"] = 5] = "QUALITY_VBAD";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_DOWN"] = 6] = "QUALITY_DOWN";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_UNSUPPORTED"] = 7] = "QUALITY_UNSUPPORTED";
        QUALITY_TYPE[QUALITY_TYPE["QUALITY_DETECTING"] = 8] = "QUALITY_DETECTING";
    })(QUALITY_TYPE = agora.QUALITY_TYPE || (agora.QUALITY_TYPE = {}));
    var RENDER_MODE_TYPE;
    (function (RENDER_MODE_TYPE) {
        RENDER_MODE_TYPE[RENDER_MODE_TYPE["RENDER_MODE_HIDDEN"] = 1] = "RENDER_MODE_HIDDEN";
        RENDER_MODE_TYPE[RENDER_MODE_TYPE["RENDER_MODE_FIT"] = 2] = "RENDER_MODE_FIT";
        RENDER_MODE_TYPE[RENDER_MODE_TYPE["RENDER_MODE_ADAPTIVE"] = 3] = "RENDER_MODE_ADAPTIVE";
        RENDER_MODE_TYPE[RENDER_MODE_TYPE["RENDER_MODE_FILL"] = 4] = "RENDER_MODE_FILL";
    })(RENDER_MODE_TYPE = agora.RENDER_MODE_TYPE || (agora.RENDER_MODE_TYPE = {}));
    var VIDEO_MIRROR_MODE_TYPE;
    (function (VIDEO_MIRROR_MODE_TYPE) {
        VIDEO_MIRROR_MODE_TYPE[VIDEO_MIRROR_MODE_TYPE["VIDEO_MIRROR_MODE_AUTO"] = 0] = "VIDEO_MIRROR_MODE_AUTO";
        VIDEO_MIRROR_MODE_TYPE[VIDEO_MIRROR_MODE_TYPE["VIDEO_MIRROR_MODE_ENABLED"] = 1] = "VIDEO_MIRROR_MODE_ENABLED";
        VIDEO_MIRROR_MODE_TYPE[VIDEO_MIRROR_MODE_TYPE["VIDEO_MIRROR_MODE_DISABLED"] = 2] = "VIDEO_MIRROR_MODE_DISABLED";
    })(VIDEO_MIRROR_MODE_TYPE = agora.VIDEO_MIRROR_MODE_TYPE || (agora.VIDEO_MIRROR_MODE_TYPE = {}));
    var VIDEO_PROFILE_TYPE;
    (function (VIDEO_PROFILE_TYPE) {
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_120P"] = 0] = "VIDEO_PROFILE_LANDSCAPE_120P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_120P_3"] = 2] = "VIDEO_PROFILE_LANDSCAPE_120P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_180P"] = 10] = "VIDEO_PROFILE_LANDSCAPE_180P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_180P_3"] = 12] = "VIDEO_PROFILE_LANDSCAPE_180P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_180P_4"] = 13] = "VIDEO_PROFILE_LANDSCAPE_180P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_240P"] = 20] = "VIDEO_PROFILE_LANDSCAPE_240P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_240P_3"] = 22] = "VIDEO_PROFILE_LANDSCAPE_240P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_240P_4"] = 23] = "VIDEO_PROFILE_LANDSCAPE_240P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P"] = 30] = "VIDEO_PROFILE_LANDSCAPE_360P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_3"] = 32] = "VIDEO_PROFILE_LANDSCAPE_360P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_4"] = 33] = "VIDEO_PROFILE_LANDSCAPE_360P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_6"] = 35] = "VIDEO_PROFILE_LANDSCAPE_360P_6";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_7"] = 36] = "VIDEO_PROFILE_LANDSCAPE_360P_7";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_8"] = 37] = "VIDEO_PROFILE_LANDSCAPE_360P_8";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_9"] = 38] = "VIDEO_PROFILE_LANDSCAPE_360P_9";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_10"] = 39] = "VIDEO_PROFILE_LANDSCAPE_360P_10";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_360P_11"] = 100] = "VIDEO_PROFILE_LANDSCAPE_360P_11";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_480P"] = 40] = "VIDEO_PROFILE_LANDSCAPE_480P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_480P_3"] = 42] = "VIDEO_PROFILE_LANDSCAPE_480P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_480P_4"] = 43] = "VIDEO_PROFILE_LANDSCAPE_480P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_480P_6"] = 45] = "VIDEO_PROFILE_LANDSCAPE_480P_6";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_480P_8"] = 47] = "VIDEO_PROFILE_LANDSCAPE_480P_8";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_480P_9"] = 48] = "VIDEO_PROFILE_LANDSCAPE_480P_9";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_480P_10"] = 49] = "VIDEO_PROFILE_LANDSCAPE_480P_10";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_720P"] = 50] = "VIDEO_PROFILE_LANDSCAPE_720P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_720P_3"] = 52] = "VIDEO_PROFILE_LANDSCAPE_720P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_720P_5"] = 54] = "VIDEO_PROFILE_LANDSCAPE_720P_5";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_720P_6"] = 55] = "VIDEO_PROFILE_LANDSCAPE_720P_6";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_1080P"] = 60] = "VIDEO_PROFILE_LANDSCAPE_1080P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_1080P_3"] = 62] = "VIDEO_PROFILE_LANDSCAPE_1080P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_1080P_5"] = 64] = "VIDEO_PROFILE_LANDSCAPE_1080P_5";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_1440P"] = 66] = "VIDEO_PROFILE_LANDSCAPE_1440P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_1440P_2"] = 67] = "VIDEO_PROFILE_LANDSCAPE_1440P_2";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_4K"] = 70] = "VIDEO_PROFILE_LANDSCAPE_4K";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_LANDSCAPE_4K_3"] = 72] = "VIDEO_PROFILE_LANDSCAPE_4K_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_120P"] = 1000] = "VIDEO_PROFILE_PORTRAIT_120P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_120P_3"] = 1002] = "VIDEO_PROFILE_PORTRAIT_120P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_180P"] = 1010] = "VIDEO_PROFILE_PORTRAIT_180P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_180P_3"] = 1012] = "VIDEO_PROFILE_PORTRAIT_180P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_180P_4"] = 1013] = "VIDEO_PROFILE_PORTRAIT_180P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_240P"] = 1020] = "VIDEO_PROFILE_PORTRAIT_240P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_240P_3"] = 1022] = "VIDEO_PROFILE_PORTRAIT_240P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_240P_4"] = 1023] = "VIDEO_PROFILE_PORTRAIT_240P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P"] = 1030] = "VIDEO_PROFILE_PORTRAIT_360P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_3"] = 1032] = "VIDEO_PROFILE_PORTRAIT_360P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_4"] = 1033] = "VIDEO_PROFILE_PORTRAIT_360P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_6"] = 1035] = "VIDEO_PROFILE_PORTRAIT_360P_6";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_7"] = 1036] = "VIDEO_PROFILE_PORTRAIT_360P_7";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_8"] = 1037] = "VIDEO_PROFILE_PORTRAIT_360P_8";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_9"] = 1038] = "VIDEO_PROFILE_PORTRAIT_360P_9";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_10"] = 1039] = "VIDEO_PROFILE_PORTRAIT_360P_10";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_360P_11"] = 1100] = "VIDEO_PROFILE_PORTRAIT_360P_11";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_480P"] = 1040] = "VIDEO_PROFILE_PORTRAIT_480P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_480P_3"] = 1042] = "VIDEO_PROFILE_PORTRAIT_480P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_480P_4"] = 1043] = "VIDEO_PROFILE_PORTRAIT_480P_4";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_480P_6"] = 1045] = "VIDEO_PROFILE_PORTRAIT_480P_6";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_480P_8"] = 1047] = "VIDEO_PROFILE_PORTRAIT_480P_8";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_480P_9"] = 1048] = "VIDEO_PROFILE_PORTRAIT_480P_9";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_480P_10"] = 1049] = "VIDEO_PROFILE_PORTRAIT_480P_10";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_720P"] = 1050] = "VIDEO_PROFILE_PORTRAIT_720P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_720P_3"] = 1052] = "VIDEO_PROFILE_PORTRAIT_720P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_720P_5"] = 1054] = "VIDEO_PROFILE_PORTRAIT_720P_5";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_720P_6"] = 1055] = "VIDEO_PROFILE_PORTRAIT_720P_6";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_1080P"] = 1060] = "VIDEO_PROFILE_PORTRAIT_1080P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_1080P_3"] = 1062] = "VIDEO_PROFILE_PORTRAIT_1080P_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_1080P_5"] = 1064] = "VIDEO_PROFILE_PORTRAIT_1080P_5";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_1440P"] = 1066] = "VIDEO_PROFILE_PORTRAIT_1440P";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_1440P_2"] = 1067] = "VIDEO_PROFILE_PORTRAIT_1440P_2";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_4K"] = 1070] = "VIDEO_PROFILE_PORTRAIT_4K";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_PORTRAIT_4K_3"] = 1072] = "VIDEO_PROFILE_PORTRAIT_4K_3";
        VIDEO_PROFILE_TYPE[VIDEO_PROFILE_TYPE["VIDEO_PROFILE_DEFAULT"] = 30] = "VIDEO_PROFILE_DEFAULT";
    })(VIDEO_PROFILE_TYPE = agora.VIDEO_PROFILE_TYPE || (agora.VIDEO_PROFILE_TYPE = {}));
    var AUDIO_PROFILE_TYPE;
    (function (AUDIO_PROFILE_TYPE) {
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_DEFAULT"] = 0] = "AUDIO_PROFILE_DEFAULT";
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_SPEECH_STANDARD"] = 1] = "AUDIO_PROFILE_SPEECH_STANDARD";
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_MUSIC_STANDARD"] = 2] = "AUDIO_PROFILE_MUSIC_STANDARD";
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_MUSIC_STANDARD_STEREO"] = 3] = "AUDIO_PROFILE_MUSIC_STANDARD_STEREO";
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_MUSIC_HIGH_QUALITY"] = 4] = "AUDIO_PROFILE_MUSIC_HIGH_QUALITY";
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO"] = 5] = "AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO";
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_IOT"] = 6] = "AUDIO_PROFILE_IOT";
        AUDIO_PROFILE_TYPE[AUDIO_PROFILE_TYPE["AUDIO_PROFILE_NUM"] = 7] = "AUDIO_PROFILE_NUM";
    })(AUDIO_PROFILE_TYPE = agora.AUDIO_PROFILE_TYPE || (agora.AUDIO_PROFILE_TYPE = {}));
    var AUDIO_SCENARIO_TYPE;
    (function (AUDIO_SCENARIO_TYPE) {
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_DEFAULT"] = 0] = "AUDIO_SCENARIO_DEFAULT";
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_CHATROOM_ENTERTAINMENT"] = 1] = "AUDIO_SCENARIO_CHATROOM_ENTERTAINMENT";
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_EDUCATION"] = 2] = "AUDIO_SCENARIO_EDUCATION";
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_GAME_STREAMING"] = 3] = "AUDIO_SCENARIO_GAME_STREAMING";
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_SHOWROOM"] = 4] = "AUDIO_SCENARIO_SHOWROOM";
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_CHATROOM_GAMING"] = 5] = "AUDIO_SCENARIO_CHATROOM_GAMING";
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_IOT"] = 6] = "AUDIO_SCENARIO_IOT";
        AUDIO_SCENARIO_TYPE[AUDIO_SCENARIO_TYPE["AUDIO_SCENARIO_NUM"] = 7] = "AUDIO_SCENARIO_NUM";
    })(AUDIO_SCENARIO_TYPE = agora.AUDIO_SCENARIO_TYPE || (agora.AUDIO_SCENARIO_TYPE = {}));
    var CHANNEL_PROFILE_TYPE;
    (function (CHANNEL_PROFILE_TYPE) {
        CHANNEL_PROFILE_TYPE[CHANNEL_PROFILE_TYPE["CHANNEL_PROFILE_COMMUNICATION"] = 0] = "CHANNEL_PROFILE_COMMUNICATION";
        CHANNEL_PROFILE_TYPE[CHANNEL_PROFILE_TYPE["CHANNEL_PROFILE_LIVE_BROADCASTING"] = 1] = "CHANNEL_PROFILE_LIVE_BROADCASTING";
        CHANNEL_PROFILE_TYPE[CHANNEL_PROFILE_TYPE["CHANNEL_PROFILE_GAME"] = 2] = "CHANNEL_PROFILE_GAME";
    })(CHANNEL_PROFILE_TYPE = agora.CHANNEL_PROFILE_TYPE || (agora.CHANNEL_PROFILE_TYPE = {}));
    var CLIENT_ROLE_TYPE;
    (function (CLIENT_ROLE_TYPE) {
        CLIENT_ROLE_TYPE[CLIENT_ROLE_TYPE["CLIENT_ROLE_BROADCASTER"] = 1] = "CLIENT_ROLE_BROADCASTER";
        CLIENT_ROLE_TYPE[CLIENT_ROLE_TYPE["CLIENT_ROLE_AUDIENCE"] = 2] = "CLIENT_ROLE_AUDIENCE";
    })(CLIENT_ROLE_TYPE = agora.CLIENT_ROLE_TYPE || (agora.CLIENT_ROLE_TYPE = {}));
    var USER_OFFLINE_REASON_TYPE;
    (function (USER_OFFLINE_REASON_TYPE) {
        USER_OFFLINE_REASON_TYPE[USER_OFFLINE_REASON_TYPE["USER_OFFLINE_QUIT"] = 0] = "USER_OFFLINE_QUIT";
        USER_OFFLINE_REASON_TYPE[USER_OFFLINE_REASON_TYPE["USER_OFFLINE_DROPPED"] = 1] = "USER_OFFLINE_DROPPED";
        USER_OFFLINE_REASON_TYPE[USER_OFFLINE_REASON_TYPE["USER_OFFLINE_BECOME_AUDIENCE"] = 2] = "USER_OFFLINE_BECOME_AUDIENCE";
    })(USER_OFFLINE_REASON_TYPE = agora.USER_OFFLINE_REASON_TYPE || (agora.USER_OFFLINE_REASON_TYPE = {}));
    var RTMP_STREAM_PUBLISH_STATE;
    (function (RTMP_STREAM_PUBLISH_STATE) {
        RTMP_STREAM_PUBLISH_STATE[RTMP_STREAM_PUBLISH_STATE["RTMP_STREAM_PUBLISH_STATE_IDLE"] = 0] = "RTMP_STREAM_PUBLISH_STATE_IDLE";
        RTMP_STREAM_PUBLISH_STATE[RTMP_STREAM_PUBLISH_STATE["RTMP_STREAM_PUBLISH_STATE_CONNECTING"] = 1] = "RTMP_STREAM_PUBLISH_STATE_CONNECTING";
        RTMP_STREAM_PUBLISH_STATE[RTMP_STREAM_PUBLISH_STATE["RTMP_STREAM_PUBLISH_STATE_RUNNING"] = 2] = "RTMP_STREAM_PUBLISH_STATE_RUNNING";
        RTMP_STREAM_PUBLISH_STATE[RTMP_STREAM_PUBLISH_STATE["RTMP_STREAM_PUBLISH_STATE_RECOVERING"] = 3] = "RTMP_STREAM_PUBLISH_STATE_RECOVERING";
        RTMP_STREAM_PUBLISH_STATE[RTMP_STREAM_PUBLISH_STATE["RTMP_STREAM_PUBLISH_STATE_FAILURE"] = 4] = "RTMP_STREAM_PUBLISH_STATE_FAILURE";
    })(RTMP_STREAM_PUBLISH_STATE = agora.RTMP_STREAM_PUBLISH_STATE || (agora.RTMP_STREAM_PUBLISH_STATE = {}));
    var RTMP_STREAM_PUBLISH_ERROR;
    (function (RTMP_STREAM_PUBLISH_ERROR) {
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_OK"] = 0] = "RTMP_STREAM_PUBLISH_ERROR_OK";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_INVALID_ARGUMENT"] = 1] = "RTMP_STREAM_PUBLISH_ERROR_INVALID_ARGUMENT";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_ENCRYPTED_STREAM_NOT_ALLOWED"] = 2] = "RTMP_STREAM_PUBLISH_ERROR_ENCRYPTED_STREAM_NOT_ALLOWED";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_CONNECTION_TIMEOUT"] = 3] = "RTMP_STREAM_PUBLISH_ERROR_CONNECTION_TIMEOUT";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_INTERNAL_SERVER_ERROR"] = 4] = "RTMP_STREAM_PUBLISH_ERROR_INTERNAL_SERVER_ERROR";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_RTMP_SERVER_ERROR"] = 5] = "RTMP_STREAM_PUBLISH_ERROR_RTMP_SERVER_ERROR";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_TOO_OFTEN"] = 6] = "RTMP_STREAM_PUBLISH_ERROR_TOO_OFTEN";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_REACH_LIMIT"] = 7] = "RTMP_STREAM_PUBLISH_ERROR_REACH_LIMIT";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_NOT_AUTHORIZED"] = 8] = "RTMP_STREAM_PUBLISH_ERROR_NOT_AUTHORIZED";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_STREAM_NOT_FOUND"] = 9] = "RTMP_STREAM_PUBLISH_ERROR_STREAM_NOT_FOUND";
        RTMP_STREAM_PUBLISH_ERROR[RTMP_STREAM_PUBLISH_ERROR["RTMP_STREAM_PUBLISH_ERROR_FORMAT_NOT_SUPPORTED"] = 10] = "RTMP_STREAM_PUBLISH_ERROR_FORMAT_NOT_SUPPORTED";
    })(RTMP_STREAM_PUBLISH_ERROR = agora.RTMP_STREAM_PUBLISH_ERROR || (agora.RTMP_STREAM_PUBLISH_ERROR = {}));
    var RTMP_STREAMING_EVENT;
    (function (RTMP_STREAMING_EVENT) {
        RTMP_STREAMING_EVENT[RTMP_STREAMING_EVENT["RTMP_STREAMING_EVENT_FAILED_LOAD_IMAGE"] = 1] = "RTMP_STREAMING_EVENT_FAILED_LOAD_IMAGE";
    })(RTMP_STREAMING_EVENT = agora.RTMP_STREAMING_EVENT || (agora.RTMP_STREAMING_EVENT = {}));
    var INJECT_STREAM_STATUS;
    (function (INJECT_STREAM_STATUS) {
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_START_SUCCESS"] = 0] = "INJECT_STREAM_STATUS_START_SUCCESS";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_START_ALREADY_EXISTS"] = 1] = "INJECT_STREAM_STATUS_START_ALREADY_EXISTS";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_START_UNAUTHORIZED"] = 2] = "INJECT_STREAM_STATUS_START_UNAUTHORIZED";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_START_TIMEDOUT"] = 3] = "INJECT_STREAM_STATUS_START_TIMEDOUT";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_START_FAILED"] = 4] = "INJECT_STREAM_STATUS_START_FAILED";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_STOP_SUCCESS"] = 5] = "INJECT_STREAM_STATUS_STOP_SUCCESS";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_STOP_NOT_FOUND"] = 6] = "INJECT_STREAM_STATUS_STOP_NOT_FOUND";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_STOP_UNAUTHORIZED"] = 7] = "INJECT_STREAM_STATUS_STOP_UNAUTHORIZED";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_STOP_TIMEDOUT"] = 8] = "INJECT_STREAM_STATUS_STOP_TIMEDOUT";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_STOP_FAILED"] = 9] = "INJECT_STREAM_STATUS_STOP_FAILED";
        INJECT_STREAM_STATUS[INJECT_STREAM_STATUS["INJECT_STREAM_STATUS_BROKEN"] = 10] = "INJECT_STREAM_STATUS_BROKEN";
    })(INJECT_STREAM_STATUS = agora.INJECT_STREAM_STATUS || (agora.INJECT_STREAM_STATUS = {}));
    var REMOTE_VIDEO_STREAM_TYPE;
    (function (REMOTE_VIDEO_STREAM_TYPE) {
        REMOTE_VIDEO_STREAM_TYPE[REMOTE_VIDEO_STREAM_TYPE["REMOTE_VIDEO_STREAM_HIGH"] = 0] = "REMOTE_VIDEO_STREAM_HIGH";
        REMOTE_VIDEO_STREAM_TYPE[REMOTE_VIDEO_STREAM_TYPE["REMOTE_VIDEO_STREAM_LOW"] = 1] = "REMOTE_VIDEO_STREAM_LOW";
    })(REMOTE_VIDEO_STREAM_TYPE = agora.REMOTE_VIDEO_STREAM_TYPE || (agora.REMOTE_VIDEO_STREAM_TYPE = {}));
    var RAW_AUDIO_FRAME_OP_MODE_TYPE;
    (function (RAW_AUDIO_FRAME_OP_MODE_TYPE) {
        RAW_AUDIO_FRAME_OP_MODE_TYPE[RAW_AUDIO_FRAME_OP_MODE_TYPE["RAW_AUDIO_FRAME_OP_MODE_READ_ONLY"] = 0] = "RAW_AUDIO_FRAME_OP_MODE_READ_ONLY";
        RAW_AUDIO_FRAME_OP_MODE_TYPE[RAW_AUDIO_FRAME_OP_MODE_TYPE["RAW_AUDIO_FRAME_OP_MODE_WRITE_ONLY"] = 1] = "RAW_AUDIO_FRAME_OP_MODE_WRITE_ONLY";
        RAW_AUDIO_FRAME_OP_MODE_TYPE[RAW_AUDIO_FRAME_OP_MODE_TYPE["RAW_AUDIO_FRAME_OP_MODE_READ_WRITE"] = 2] = "RAW_AUDIO_FRAME_OP_MODE_READ_WRITE";
    })(RAW_AUDIO_FRAME_OP_MODE_TYPE = agora.RAW_AUDIO_FRAME_OP_MODE_TYPE || (agora.RAW_AUDIO_FRAME_OP_MODE_TYPE = {}));
    var AUDIO_SAMPLE_RATE_TYPE;
    (function (AUDIO_SAMPLE_RATE_TYPE) {
        AUDIO_SAMPLE_RATE_TYPE[AUDIO_SAMPLE_RATE_TYPE["AUDIO_SAMPLE_RATE_32000"] = 32000] = "AUDIO_SAMPLE_RATE_32000";
        AUDIO_SAMPLE_RATE_TYPE[AUDIO_SAMPLE_RATE_TYPE["AUDIO_SAMPLE_RATE_44100"] = 44100] = "AUDIO_SAMPLE_RATE_44100";
        AUDIO_SAMPLE_RATE_TYPE[AUDIO_SAMPLE_RATE_TYPE["AUDIO_SAMPLE_RATE_48000"] = 48000] = "AUDIO_SAMPLE_RATE_48000";
    })(AUDIO_SAMPLE_RATE_TYPE = agora.AUDIO_SAMPLE_RATE_TYPE || (agora.AUDIO_SAMPLE_RATE_TYPE = {}));
    var VIDEO_CODEC_PROFILE_TYPE;
    (function (VIDEO_CODEC_PROFILE_TYPE) {
        VIDEO_CODEC_PROFILE_TYPE[VIDEO_CODEC_PROFILE_TYPE["VIDEO_CODEC_PROFILE_BASELINE"] = 66] = "VIDEO_CODEC_PROFILE_BASELINE";
        VIDEO_CODEC_PROFILE_TYPE[VIDEO_CODEC_PROFILE_TYPE["VIDEO_CODEC_PROFILE_MAIN"] = 77] = "VIDEO_CODEC_PROFILE_MAIN";
        VIDEO_CODEC_PROFILE_TYPE[VIDEO_CODEC_PROFILE_TYPE["VIDEO_CODEC_PROFILE_HIGH"] = 100] = "VIDEO_CODEC_PROFILE_HIGH";
    })(VIDEO_CODEC_PROFILE_TYPE = agora.VIDEO_CODEC_PROFILE_TYPE || (agora.VIDEO_CODEC_PROFILE_TYPE = {}));
    var VIDEO_CODEC_TYPE;
    (function (VIDEO_CODEC_TYPE) {
        VIDEO_CODEC_TYPE[VIDEO_CODEC_TYPE["VIDEO_CODEC_VP8"] = 1] = "VIDEO_CODEC_VP8";
        VIDEO_CODEC_TYPE[VIDEO_CODEC_TYPE["VIDEO_CODEC_H264"] = 2] = "VIDEO_CODEC_H264";
        VIDEO_CODEC_TYPE[VIDEO_CODEC_TYPE["VIDEO_CODEC_EVP"] = 3] = "VIDEO_CODEC_EVP";
        VIDEO_CODEC_TYPE[VIDEO_CODEC_TYPE["VIDEO_CODEC_E264"] = 4] = "VIDEO_CODEC_E264";
    })(VIDEO_CODEC_TYPE = agora.VIDEO_CODEC_TYPE || (agora.VIDEO_CODEC_TYPE = {}));
    var AUDIO_EQUALIZATION_BAND_FREQUENCY;
    (function (AUDIO_EQUALIZATION_BAND_FREQUENCY) {
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_31"] = 0] = "AUDIO_EQUALIZATION_BAND_31";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_62"] = 1] = "AUDIO_EQUALIZATION_BAND_62";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_125"] = 2] = "AUDIO_EQUALIZATION_BAND_125";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_250"] = 3] = "AUDIO_EQUALIZATION_BAND_250";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_500"] = 4] = "AUDIO_EQUALIZATION_BAND_500";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_1K"] = 5] = "AUDIO_EQUALIZATION_BAND_1K";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_2K"] = 6] = "AUDIO_EQUALIZATION_BAND_2K";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_4K"] = 7] = "AUDIO_EQUALIZATION_BAND_4K";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_8K"] = 8] = "AUDIO_EQUALIZATION_BAND_8K";
        AUDIO_EQUALIZATION_BAND_FREQUENCY[AUDIO_EQUALIZATION_BAND_FREQUENCY["AUDIO_EQUALIZATION_BAND_16K"] = 9] = "AUDIO_EQUALIZATION_BAND_16K";
    })(AUDIO_EQUALIZATION_BAND_FREQUENCY = agora.AUDIO_EQUALIZATION_BAND_FREQUENCY || (agora.AUDIO_EQUALIZATION_BAND_FREQUENCY = {}));
    var AUDIO_REVERB_TYPE;
    (function (AUDIO_REVERB_TYPE) {
        AUDIO_REVERB_TYPE[AUDIO_REVERB_TYPE["AUDIO_REVERB_DRY_LEVEL"] = 0] = "AUDIO_REVERB_DRY_LEVEL";
        AUDIO_REVERB_TYPE[AUDIO_REVERB_TYPE["AUDIO_REVERB_WET_LEVEL"] = 1] = "AUDIO_REVERB_WET_LEVEL";
        AUDIO_REVERB_TYPE[AUDIO_REVERB_TYPE["AUDIO_REVERB_ROOM_SIZE"] = 2] = "AUDIO_REVERB_ROOM_SIZE";
        AUDIO_REVERB_TYPE[AUDIO_REVERB_TYPE["AUDIO_REVERB_WET_DELAY"] = 3] = "AUDIO_REVERB_WET_DELAY";
        AUDIO_REVERB_TYPE[AUDIO_REVERB_TYPE["AUDIO_REVERB_STRENGTH"] = 4] = "AUDIO_REVERB_STRENGTH";
    })(AUDIO_REVERB_TYPE = agora.AUDIO_REVERB_TYPE || (agora.AUDIO_REVERB_TYPE = {}));
    var VOICE_CHANGER_PRESET;
    (function (VOICE_CHANGER_PRESET) {
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_CHANGER_OFF"] = 0] = "VOICE_CHANGER_OFF";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_CHANGER_OLDMAN"] = 1] = "VOICE_CHANGER_OLDMAN";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_CHANGER_BABYBOY"] = 2] = "VOICE_CHANGER_BABYBOY";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_CHANGER_BABYGIRL"] = 3] = "VOICE_CHANGER_BABYGIRL";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_CHANGER_ZHUBAJIE"] = 4] = "VOICE_CHANGER_ZHUBAJIE";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_CHANGER_ETHEREAL"] = 5] = "VOICE_CHANGER_ETHEREAL";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_CHANGER_HULK"] = 6] = "VOICE_CHANGER_HULK";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_VIGOROUS"] = 1048577] = "VOICE_BEAUTY_VIGOROUS";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_DEEP"] = 1048578] = "VOICE_BEAUTY_DEEP";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_MELLOW"] = 1048579] = "VOICE_BEAUTY_MELLOW";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_FALSETTO"] = 1048580] = "VOICE_BEAUTY_FALSETTO";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_FULL"] = 1048581] = "VOICE_BEAUTY_FULL";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_CLEAR"] = 1048582] = "VOICE_BEAUTY_CLEAR";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_RESOUNDING"] = 1048583] = "VOICE_BEAUTY_RESOUNDING";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_RINGING"] = 1048584] = "VOICE_BEAUTY_RINGING";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["VOICE_BEAUTY_SPACIAL"] = 1048585] = "VOICE_BEAUTY_SPACIAL";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["GENERAL_BEAUTY_VOICE_MALE_MAGNETIC"] = 2097153] = "GENERAL_BEAUTY_VOICE_MALE_MAGNETIC";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["GENERAL_BEAUTY_VOICE_FEMALE_FRESH"] = 2097154] = "GENERAL_BEAUTY_VOICE_FEMALE_FRESH";
        VOICE_CHANGER_PRESET[VOICE_CHANGER_PRESET["GENERAL_BEAUTY_VOICE_FEMALE_VITALITY"] = 2097155] = "GENERAL_BEAUTY_VOICE_FEMALE_VITALITY";
    })(VOICE_CHANGER_PRESET = agora.VOICE_CHANGER_PRESET || (agora.VOICE_CHANGER_PRESET = {}));
    var AUDIO_REVERB_PRESET;
    (function (AUDIO_REVERB_PRESET) {
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_OFF"] = 0] = "AUDIO_REVERB_OFF";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_KTV"] = 1048577] = "AUDIO_REVERB_FX_KTV";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_VOCAL_CONCERT"] = 1048578] = "AUDIO_REVERB_FX_VOCAL_CONCERT";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_UNCLE"] = 1048579] = "AUDIO_REVERB_FX_UNCLE";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_SISTER"] = 1048580] = "AUDIO_REVERB_FX_SISTER";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_STUDIO"] = 1048581] = "AUDIO_REVERB_FX_STUDIO";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_POPULAR"] = 1048582] = "AUDIO_REVERB_FX_POPULAR";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_RNB"] = 1048583] = "AUDIO_REVERB_FX_RNB";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_FX_PHONOGRAPH"] = 1048584] = "AUDIO_REVERB_FX_PHONOGRAPH";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_POPULAR"] = 1] = "AUDIO_REVERB_POPULAR";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_RNB"] = 2] = "AUDIO_REVERB_RNB";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_ROCK"] = 3] = "AUDIO_REVERB_ROCK";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_HIPHOP"] = 4] = "AUDIO_REVERB_HIPHOP";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_VOCAL_CONCERT"] = 5] = "AUDIO_REVERB_VOCAL_CONCERT";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_KTV"] = 6] = "AUDIO_REVERB_KTV";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_REVERB_STUDIO"] = 7] = "AUDIO_REVERB_STUDIO";
        AUDIO_REVERB_PRESET[AUDIO_REVERB_PRESET["AUDIO_VIRTUAL_STEREO"] = 2097153] = "AUDIO_VIRTUAL_STEREO";
    })(AUDIO_REVERB_PRESET = agora.AUDIO_REVERB_PRESET || (agora.AUDIO_REVERB_PRESET = {}));
    var AUDIO_CODEC_PROFILE_TYPE;
    (function (AUDIO_CODEC_PROFILE_TYPE) {
        AUDIO_CODEC_PROFILE_TYPE[AUDIO_CODEC_PROFILE_TYPE["AUDIO_CODEC_PROFILE_LC_AAC"] = 0] = "AUDIO_CODEC_PROFILE_LC_AAC";
        AUDIO_CODEC_PROFILE_TYPE[AUDIO_CODEC_PROFILE_TYPE["AUDIO_CODEC_PROFILE_HE_AAC"] = 1] = "AUDIO_CODEC_PROFILE_HE_AAC";
    })(AUDIO_CODEC_PROFILE_TYPE = agora.AUDIO_CODEC_PROFILE_TYPE || (agora.AUDIO_CODEC_PROFILE_TYPE = {}));
    var REMOTE_AUDIO_STATE;
    (function (REMOTE_AUDIO_STATE) {
        REMOTE_AUDIO_STATE[REMOTE_AUDIO_STATE["REMOTE_AUDIO_STATE_STOPPED"] = 0] = "REMOTE_AUDIO_STATE_STOPPED";
        REMOTE_AUDIO_STATE[REMOTE_AUDIO_STATE["REMOTE_AUDIO_STATE_STARTING"] = 1] = "REMOTE_AUDIO_STATE_STARTING";
        REMOTE_AUDIO_STATE[REMOTE_AUDIO_STATE["REMOTE_AUDIO_STATE_DECODING"] = 2] = "REMOTE_AUDIO_STATE_DECODING";
        REMOTE_AUDIO_STATE[REMOTE_AUDIO_STATE["REMOTE_AUDIO_STATE_FROZEN"] = 3] = "REMOTE_AUDIO_STATE_FROZEN";
        REMOTE_AUDIO_STATE[REMOTE_AUDIO_STATE["REMOTE_AUDIO_STATE_FAILED"] = 4] = "REMOTE_AUDIO_STATE_FAILED";
    })(REMOTE_AUDIO_STATE = agora.REMOTE_AUDIO_STATE || (agora.REMOTE_AUDIO_STATE = {}));
    var REMOTE_AUDIO_STATE_REASON;
    (function (REMOTE_AUDIO_STATE_REASON) {
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_INTERNAL"] = 0] = "REMOTE_AUDIO_REASON_INTERNAL";
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_NETWORK_CONGESTION"] = 1] = "REMOTE_AUDIO_REASON_NETWORK_CONGESTION";
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_NETWORK_RECOVERY"] = 2] = "REMOTE_AUDIO_REASON_NETWORK_RECOVERY";
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_LOCAL_MUTED"] = 3] = "REMOTE_AUDIO_REASON_LOCAL_MUTED";
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_LOCAL_UNMUTED"] = 4] = "REMOTE_AUDIO_REASON_LOCAL_UNMUTED";
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_REMOTE_MUTED"] = 5] = "REMOTE_AUDIO_REASON_REMOTE_MUTED";
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_REMOTE_UNMUTED"] = 6] = "REMOTE_AUDIO_REASON_REMOTE_UNMUTED";
        REMOTE_AUDIO_STATE_REASON[REMOTE_AUDIO_STATE_REASON["REMOTE_AUDIO_REASON_REMOTE_OFFLINE"] = 7] = "REMOTE_AUDIO_REASON_REMOTE_OFFLINE";
    })(REMOTE_AUDIO_STATE_REASON = agora.REMOTE_AUDIO_STATE_REASON || (agora.REMOTE_AUDIO_STATE_REASON = {}));
    var REMOTE_VIDEO_STATE;
    (function (REMOTE_VIDEO_STATE) {
        REMOTE_VIDEO_STATE[REMOTE_VIDEO_STATE["REMOTE_VIDEO_STATE_STOPPED"] = 0] = "REMOTE_VIDEO_STATE_STOPPED";
        REMOTE_VIDEO_STATE[REMOTE_VIDEO_STATE["REMOTE_VIDEO_STATE_STARTING"] = 1] = "REMOTE_VIDEO_STATE_STARTING";
        REMOTE_VIDEO_STATE[REMOTE_VIDEO_STATE["REMOTE_VIDEO_STATE_DECODING"] = 2] = "REMOTE_VIDEO_STATE_DECODING";
        REMOTE_VIDEO_STATE[REMOTE_VIDEO_STATE["REMOTE_VIDEO_STATE_FROZEN"] = 3] = "REMOTE_VIDEO_STATE_FROZEN";
        REMOTE_VIDEO_STATE[REMOTE_VIDEO_STATE["REMOTE_VIDEO_STATE_FAILED"] = 4] = "REMOTE_VIDEO_STATE_FAILED";
    })(REMOTE_VIDEO_STATE = agora.REMOTE_VIDEO_STATE || (agora.REMOTE_VIDEO_STATE = {}));
    var STREAM_PUBLISH_STATE;
    (function (STREAM_PUBLISH_STATE) {
        STREAM_PUBLISH_STATE[STREAM_PUBLISH_STATE["PUB_STATE_IDLE"] = 0] = "PUB_STATE_IDLE";
        STREAM_PUBLISH_STATE[STREAM_PUBLISH_STATE["PUB_STATE_NO_PUBLISHED"] = 1] = "PUB_STATE_NO_PUBLISHED";
        STREAM_PUBLISH_STATE[STREAM_PUBLISH_STATE["PUB_STATE_PUBLISHING"] = 2] = "PUB_STATE_PUBLISHING";
        STREAM_PUBLISH_STATE[STREAM_PUBLISH_STATE["PUB_STATE_PUBLISHED"] = 3] = "PUB_STATE_PUBLISHED";
    })(STREAM_PUBLISH_STATE = agora.STREAM_PUBLISH_STATE || (agora.STREAM_PUBLISH_STATE = {}));
    var STREAM_SUBSCRIBE_STATE;
    (function (STREAM_SUBSCRIBE_STATE) {
        STREAM_SUBSCRIBE_STATE[STREAM_SUBSCRIBE_STATE["SUB_STATE_IDLE"] = 0] = "SUB_STATE_IDLE";
        STREAM_SUBSCRIBE_STATE[STREAM_SUBSCRIBE_STATE["SUB_STATE_NO_SUBSCRIBED"] = 1] = "SUB_STATE_NO_SUBSCRIBED";
        STREAM_SUBSCRIBE_STATE[STREAM_SUBSCRIBE_STATE["SUB_STATE_SUBSCRIBING"] = 2] = "SUB_STATE_SUBSCRIBING";
        STREAM_SUBSCRIBE_STATE[STREAM_SUBSCRIBE_STATE["SUB_STATE_SUBSCRIBED"] = 3] = "SUB_STATE_SUBSCRIBED";
    })(STREAM_SUBSCRIBE_STATE = agora.STREAM_SUBSCRIBE_STATE || (agora.STREAM_SUBSCRIBE_STATE = {}));
    var REMOTE_VIDEO_STATE_REASON;
    (function (REMOTE_VIDEO_STATE_REASON) {
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_INTERNAL"] = 0] = "REMOTE_VIDEO_STATE_REASON_INTERNAL";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION"] = 1] = "REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY"] = 2] = "REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED"] = 3] = "REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED"] = 4] = "REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED"] = 5] = "REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED"] = 6] = "REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE"] = 7] = "REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK"] = 8] = "REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK";
        REMOTE_VIDEO_STATE_REASON[REMOTE_VIDEO_STATE_REASON["REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY"] = 9] = "REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY";
    })(REMOTE_VIDEO_STATE_REASON = agora.REMOTE_VIDEO_STATE_REASON || (agora.REMOTE_VIDEO_STATE_REASON = {}));
    var FRAME_RATE;
    (function (FRAME_RATE) {
        FRAME_RATE[FRAME_RATE["FRAME_RATE_FPS_1"] = 1] = "FRAME_RATE_FPS_1";
        FRAME_RATE[FRAME_RATE["FRAME_RATE_FPS_7"] = 7] = "FRAME_RATE_FPS_7";
        FRAME_RATE[FRAME_RATE["FRAME_RATE_FPS_10"] = 10] = "FRAME_RATE_FPS_10";
        FRAME_RATE[FRAME_RATE["FRAME_RATE_FPS_15"] = 15] = "FRAME_RATE_FPS_15";
        FRAME_RATE[FRAME_RATE["FRAME_RATE_FPS_24"] = 24] = "FRAME_RATE_FPS_24";
        FRAME_RATE[FRAME_RATE["FRAME_RATE_FPS_30"] = 30] = "FRAME_RATE_FPS_30";
        FRAME_RATE[FRAME_RATE["FRAME_RATE_FPS_60"] = 60] = "FRAME_RATE_FPS_60";
    })(FRAME_RATE = agora.FRAME_RATE || (agora.FRAME_RATE = {}));
    var ORIENTATION_MODE;
    (function (ORIENTATION_MODE) {
        ORIENTATION_MODE[ORIENTATION_MODE["ORIENTATION_MODE_ADAPTIVE"] = 0] = "ORIENTATION_MODE_ADAPTIVE";
        ORIENTATION_MODE[ORIENTATION_MODE["ORIENTATION_MODE_FIXED_LANDSCAPE"] = 1] = "ORIENTATION_MODE_FIXED_LANDSCAPE";
        ORIENTATION_MODE[ORIENTATION_MODE["ORIENTATION_MODE_FIXED_PORTRAIT"] = 2] = "ORIENTATION_MODE_FIXED_PORTRAIT";
    })(ORIENTATION_MODE = agora.ORIENTATION_MODE || (agora.ORIENTATION_MODE = {}));
    var DEGRADATION_PREFERENCE;
    (function (DEGRADATION_PREFERENCE) {
        DEGRADATION_PREFERENCE[DEGRADATION_PREFERENCE["MAINTAIN_QUALITY"] = 0] = "MAINTAIN_QUALITY";
        DEGRADATION_PREFERENCE[DEGRADATION_PREFERENCE["MAINTAIN_FRAMERATE"] = 1] = "MAINTAIN_FRAMERATE";
        DEGRADATION_PREFERENCE[DEGRADATION_PREFERENCE["MAINTAIN_BALANCED"] = 2] = "MAINTAIN_BALANCED";
    })(DEGRADATION_PREFERENCE = agora.DEGRADATION_PREFERENCE || (agora.DEGRADATION_PREFERENCE = {}));
    var STREAM_FALLBACK_OPTIONS;
    (function (STREAM_FALLBACK_OPTIONS) {
        STREAM_FALLBACK_OPTIONS[STREAM_FALLBACK_OPTIONS["STREAM_FALLBACK_OPTION_DISABLED"] = 0] = "STREAM_FALLBACK_OPTION_DISABLED";
        STREAM_FALLBACK_OPTIONS[STREAM_FALLBACK_OPTIONS["STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW"] = 1] = "STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW";
        STREAM_FALLBACK_OPTIONS[STREAM_FALLBACK_OPTIONS["STREAM_FALLBACK_OPTION_AUDIO_ONLY"] = 2] = "STREAM_FALLBACK_OPTION_AUDIO_ONLY";
    })(STREAM_FALLBACK_OPTIONS = agora.STREAM_FALLBACK_OPTIONS || (agora.STREAM_FALLBACK_OPTIONS = {}));
    var CAPTURER_OUTPUT_PREFERENCE;
    (function (CAPTURER_OUTPUT_PREFERENCE) {
        CAPTURER_OUTPUT_PREFERENCE[CAPTURER_OUTPUT_PREFERENCE["CAPTURER_OUTPUT_PREFERENCE_AUTO"] = 0] = "CAPTURER_OUTPUT_PREFERENCE_AUTO";
        CAPTURER_OUTPUT_PREFERENCE[CAPTURER_OUTPUT_PREFERENCE["CAPTURER_OUTPUT_PREFERENCE_PERFORMANCE"] = 1] = "CAPTURER_OUTPUT_PREFERENCE_PERFORMANCE";
        CAPTURER_OUTPUT_PREFERENCE[CAPTURER_OUTPUT_PREFERENCE["CAPTURER_OUTPUT_PREFERENCE_PREVIEW"] = 2] = "CAPTURER_OUTPUT_PREFERENCE_PREVIEW";
    })(CAPTURER_OUTPUT_PREFERENCE = agora.CAPTURER_OUTPUT_PREFERENCE || (agora.CAPTURER_OUTPUT_PREFERENCE = {}));
    var PRIORITY_TYPE;
    (function (PRIORITY_TYPE) {
        PRIORITY_TYPE[PRIORITY_TYPE["PRIORITY_HIGH"] = 50] = "PRIORITY_HIGH";
        PRIORITY_TYPE[PRIORITY_TYPE["PRIORITY_NORMAL"] = 100] = "PRIORITY_NORMAL";
    })(PRIORITY_TYPE = agora.PRIORITY_TYPE || (agora.PRIORITY_TYPE = {}));
    var CONNECTION_STATE_TYPE;
    (function (CONNECTION_STATE_TYPE) {
        CONNECTION_STATE_TYPE[CONNECTION_STATE_TYPE["CONNECTION_STATE_DISCONNECTED"] = 1] = "CONNECTION_STATE_DISCONNECTED";
        CONNECTION_STATE_TYPE[CONNECTION_STATE_TYPE["CONNECTION_STATE_CONNECTING"] = 2] = "CONNECTION_STATE_CONNECTING";
        CONNECTION_STATE_TYPE[CONNECTION_STATE_TYPE["CONNECTION_STATE_CONNECTED"] = 3] = "CONNECTION_STATE_CONNECTED";
        CONNECTION_STATE_TYPE[CONNECTION_STATE_TYPE["CONNECTION_STATE_RECONNECTING"] = 4] = "CONNECTION_STATE_RECONNECTING";
        CONNECTION_STATE_TYPE[CONNECTION_STATE_TYPE["CONNECTION_STATE_FAILED"] = 5] = "CONNECTION_STATE_FAILED";
    })(CONNECTION_STATE_TYPE = agora.CONNECTION_STATE_TYPE || (agora.CONNECTION_STATE_TYPE = {}));
    var CONNECTION_CHANGED_REASON_TYPE;
    (function (CONNECTION_CHANGED_REASON_TYPE) {
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_CONNECTING"] = 0] = "CONNECTION_CHANGED_CONNECTING";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_JOIN_SUCCESS"] = 1] = "CONNECTION_CHANGED_JOIN_SUCCESS";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_INTERRUPTED"] = 2] = "CONNECTION_CHANGED_INTERRUPTED";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_BANNED_BY_SERVER"] = 3] = "CONNECTION_CHANGED_BANNED_BY_SERVER";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_JOIN_FAILED"] = 4] = "CONNECTION_CHANGED_JOIN_FAILED";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_LEAVE_CHANNEL"] = 5] = "CONNECTION_CHANGED_LEAVE_CHANNEL";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_INVALID_APP_ID"] = 6] = "CONNECTION_CHANGED_INVALID_APP_ID";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_INVALID_CHANNEL_NAME"] = 7] = "CONNECTION_CHANGED_INVALID_CHANNEL_NAME";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_INVALID_TOKEN"] = 8] = "CONNECTION_CHANGED_INVALID_TOKEN";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_TOKEN_EXPIRED"] = 9] = "CONNECTION_CHANGED_TOKEN_EXPIRED";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_REJECTED_BY_SERVER"] = 10] = "CONNECTION_CHANGED_REJECTED_BY_SERVER";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_SETTING_PROXY_SERVER"] = 11] = "CONNECTION_CHANGED_SETTING_PROXY_SERVER";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_RENEW_TOKEN"] = 12] = "CONNECTION_CHANGED_RENEW_TOKEN";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED"] = 13] = "CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED";
        CONNECTION_CHANGED_REASON_TYPE[CONNECTION_CHANGED_REASON_TYPE["CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT"] = 14] = "CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT";
    })(CONNECTION_CHANGED_REASON_TYPE = agora.CONNECTION_CHANGED_REASON_TYPE || (agora.CONNECTION_CHANGED_REASON_TYPE = {}));
    var NETWORK_TYPE;
    (function (NETWORK_TYPE) {
        NETWORK_TYPE[NETWORK_TYPE["NETWORK_TYPE_UNKNOWN"] = -1] = "NETWORK_TYPE_UNKNOWN";
        NETWORK_TYPE[NETWORK_TYPE["NETWORK_TYPE_DISCONNECTED"] = 0] = "NETWORK_TYPE_DISCONNECTED";
        NETWORK_TYPE[NETWORK_TYPE["NETWORK_TYPE_LAN"] = 1] = "NETWORK_TYPE_LAN";
        NETWORK_TYPE[NETWORK_TYPE["NETWORK_TYPE_WIFI"] = 2] = "NETWORK_TYPE_WIFI";
        NETWORK_TYPE[NETWORK_TYPE["NETWORK_TYPE_MOBILE_2G"] = 3] = "NETWORK_TYPE_MOBILE_2G";
        NETWORK_TYPE[NETWORK_TYPE["NETWORK_TYPE_MOBILE_3G"] = 4] = "NETWORK_TYPE_MOBILE_3G";
        NETWORK_TYPE[NETWORK_TYPE["NETWORK_TYPE_MOBILE_4G"] = 5] = "NETWORK_TYPE_MOBILE_4G";
    })(NETWORK_TYPE = agora.NETWORK_TYPE || (agora.NETWORK_TYPE = {}));
    var LASTMILE_PROBE_RESULT_STATE;
    (function (LASTMILE_PROBE_RESULT_STATE) {
        LASTMILE_PROBE_RESULT_STATE[LASTMILE_PROBE_RESULT_STATE["LASTMILE_PROBE_RESULT_COMPLETE"] = 1] = "LASTMILE_PROBE_RESULT_COMPLETE";
        LASTMILE_PROBE_RESULT_STATE[LASTMILE_PROBE_RESULT_STATE["LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE"] = 2] = "LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE";
        LASTMILE_PROBE_RESULT_STATE[LASTMILE_PROBE_RESULT_STATE["LASTMILE_PROBE_RESULT_UNAVAILABLE"] = 3] = "LASTMILE_PROBE_RESULT_UNAVAILABLE";
    })(LASTMILE_PROBE_RESULT_STATE = agora.LASTMILE_PROBE_RESULT_STATE || (agora.LASTMILE_PROBE_RESULT_STATE = {}));
    var AUDIO_ROUTE_TYPE;
    (function (AUDIO_ROUTE_TYPE) {
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_DEFAULT"] = -1] = "AUDIO_ROUTE_DEFAULT";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_HEADSET"] = 0] = "AUDIO_ROUTE_HEADSET";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_EARPIECE"] = 1] = "AUDIO_ROUTE_EARPIECE";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_HEADSET_NO_MIC"] = 2] = "AUDIO_ROUTE_HEADSET_NO_MIC";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_SPEAKERPHONE"] = 3] = "AUDIO_ROUTE_SPEAKERPHONE";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_LOUDSPEAKER"] = 4] = "AUDIO_ROUTE_LOUDSPEAKER";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_BLUETOOTH"] = 5] = "AUDIO_ROUTE_BLUETOOTH";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_USB"] = 6] = "AUDIO_ROUTE_USB";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_HDMI"] = 7] = "AUDIO_ROUTE_HDMI";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_DISPLAYPORT"] = 8] = "AUDIO_ROUTE_DISPLAYPORT";
        AUDIO_ROUTE_TYPE[AUDIO_ROUTE_TYPE["AUDIO_ROUTE_AIRPLAY"] = 9] = "AUDIO_ROUTE_AIRPLAY";
    })(AUDIO_ROUTE_TYPE = agora.AUDIO_ROUTE_TYPE || (agora.AUDIO_ROUTE_TYPE = {}));
    var AUDIO_SESSION_OPERATION_RESTRICTION;
    (function (AUDIO_SESSION_OPERATION_RESTRICTION) {
        AUDIO_SESSION_OPERATION_RESTRICTION[AUDIO_SESSION_OPERATION_RESTRICTION["AUDIO_SESSION_OPERATION_RESTRICTION_NONE"] = 0] = "AUDIO_SESSION_OPERATION_RESTRICTION_NONE";
        AUDIO_SESSION_OPERATION_RESTRICTION[AUDIO_SESSION_OPERATION_RESTRICTION["AUDIO_SESSION_OPERATION_RESTRICTION_SET_CATEGORY"] = 1] = "AUDIO_SESSION_OPERATION_RESTRICTION_SET_CATEGORY";
        AUDIO_SESSION_OPERATION_RESTRICTION[AUDIO_SESSION_OPERATION_RESTRICTION["AUDIO_SESSION_OPERATION_RESTRICTION_CONFIGURE_SESSION"] = 2] = "AUDIO_SESSION_OPERATION_RESTRICTION_CONFIGURE_SESSION";
        AUDIO_SESSION_OPERATION_RESTRICTION[AUDIO_SESSION_OPERATION_RESTRICTION["AUDIO_SESSION_OPERATION_RESTRICTION_DEACTIVATE_SESSION"] = 4] = "AUDIO_SESSION_OPERATION_RESTRICTION_DEACTIVATE_SESSION";
        AUDIO_SESSION_OPERATION_RESTRICTION[AUDIO_SESSION_OPERATION_RESTRICTION["AUDIO_SESSION_OPERATION_RESTRICTION_ALL"] = 128] = "AUDIO_SESSION_OPERATION_RESTRICTION_ALL";
    })(AUDIO_SESSION_OPERATION_RESTRICTION = agora.AUDIO_SESSION_OPERATION_RESTRICTION || (agora.AUDIO_SESSION_OPERATION_RESTRICTION = {}));
    var CAMERA_DIRECTION;
    (function (CAMERA_DIRECTION) {
        CAMERA_DIRECTION[CAMERA_DIRECTION["CAMERA_REAR"] = 0] = "CAMERA_REAR";
        CAMERA_DIRECTION[CAMERA_DIRECTION["CAMERA_FRONT"] = 1] = "CAMERA_FRONT";
    })(CAMERA_DIRECTION = agora.CAMERA_DIRECTION || (agora.CAMERA_DIRECTION = {}));
    var QUALITY_ADAPT_INDICATION;
    (function (QUALITY_ADAPT_INDICATION) {
        QUALITY_ADAPT_INDICATION[QUALITY_ADAPT_INDICATION["ADAPT_NONE"] = 0] = "ADAPT_NONE";
        QUALITY_ADAPT_INDICATION[QUALITY_ADAPT_INDICATION["ADAPT_UP_BANDWIDTH"] = 1] = "ADAPT_UP_BANDWIDTH";
        QUALITY_ADAPT_INDICATION[QUALITY_ADAPT_INDICATION["ADAPT_DOWN_BANDWIDTH"] = 2] = "ADAPT_DOWN_BANDWIDTH";
    })(QUALITY_ADAPT_INDICATION = agora.QUALITY_ADAPT_INDICATION || (agora.QUALITY_ADAPT_INDICATION = {}));
    var CHANNEL_MEDIA_RELAY_ERROR;
    (function (CHANNEL_MEDIA_RELAY_ERROR) {
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_OK"] = 0] = "RELAY_OK";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_SERVER_ERROR_RESPONSE"] = 1] = "RELAY_ERROR_SERVER_ERROR_RESPONSE";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_SERVER_NO_RESPONSE"] = 2] = "RELAY_ERROR_SERVER_NO_RESPONSE";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_NO_RESOURCE_AVAILABLE"] = 3] = "RELAY_ERROR_NO_RESOURCE_AVAILABLE";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_FAILED_JOIN_SRC"] = 4] = "RELAY_ERROR_FAILED_JOIN_SRC";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_FAILED_JOIN_DEST"] = 5] = "RELAY_ERROR_FAILED_JOIN_DEST";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_FAILED_PACKET_RECEIVED_FROM_SRC"] = 6] = "RELAY_ERROR_FAILED_PACKET_RECEIVED_FROM_SRC";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_FAILED_PACKET_SENT_TO_DEST"] = 7] = "RELAY_ERROR_FAILED_PACKET_SENT_TO_DEST";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_SERVER_CONNECTION_LOST"] = 8] = "RELAY_ERROR_SERVER_CONNECTION_LOST";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_INTERNAL_ERROR"] = 9] = "RELAY_ERROR_INTERNAL_ERROR";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_SRC_TOKEN_EXPIRED"] = 10] = "RELAY_ERROR_SRC_TOKEN_EXPIRED";
        CHANNEL_MEDIA_RELAY_ERROR[CHANNEL_MEDIA_RELAY_ERROR["RELAY_ERROR_DEST_TOKEN_EXPIRED"] = 11] = "RELAY_ERROR_DEST_TOKEN_EXPIRED";
    })(CHANNEL_MEDIA_RELAY_ERROR = agora.CHANNEL_MEDIA_RELAY_ERROR || (agora.CHANNEL_MEDIA_RELAY_ERROR = {}));
    var CHANNEL_MEDIA_RELAY_EVENT;
    (function (CHANNEL_MEDIA_RELAY_EVENT) {
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_NETWORK_DISCONNECTED"] = 0] = "RELAY_EVENT_NETWORK_DISCONNECTED";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_NETWORK_CONNECTED"] = 1] = "RELAY_EVENT_NETWORK_CONNECTED";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_JOINED_SRC_CHANNEL"] = 2] = "RELAY_EVENT_PACKET_JOINED_SRC_CHANNEL";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_JOINED_DEST_CHANNEL"] = 3] = "RELAY_EVENT_PACKET_JOINED_DEST_CHANNEL";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL"] = 4] = "RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_RECEIVED_VIDEO_FROM_SRC"] = 5] = "RELAY_EVENT_PACKET_RECEIVED_VIDEO_FROM_SRC";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_RECEIVED_AUDIO_FROM_SRC"] = 6] = "RELAY_EVENT_PACKET_RECEIVED_AUDIO_FROM_SRC";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL"] = 7] = "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_REFUSED"] = 8] = "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_REFUSED";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE"] = 9] = "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_IS_NULL"] = 10] = "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_IS_NULL";
        CHANNEL_MEDIA_RELAY_EVENT[CHANNEL_MEDIA_RELAY_EVENT["RELAY_EVENT_VIDEO_PROFILE_UPDATE"] = 11] = "RELAY_EVENT_VIDEO_PROFILE_UPDATE";
    })(CHANNEL_MEDIA_RELAY_EVENT = agora.CHANNEL_MEDIA_RELAY_EVENT || (agora.CHANNEL_MEDIA_RELAY_EVENT = {}));
    var CHANNEL_MEDIA_RELAY_STATE;
    (function (CHANNEL_MEDIA_RELAY_STATE) {
        CHANNEL_MEDIA_RELAY_STATE[CHANNEL_MEDIA_RELAY_STATE["RELAY_STATE_IDLE"] = 0] = "RELAY_STATE_IDLE";
        CHANNEL_MEDIA_RELAY_STATE[CHANNEL_MEDIA_RELAY_STATE["RELAY_STATE_CONNECTING"] = 1] = "RELAY_STATE_CONNECTING";
        CHANNEL_MEDIA_RELAY_STATE[CHANNEL_MEDIA_RELAY_STATE["RELAY_STATE_RUNNING"] = 2] = "RELAY_STATE_RUNNING";
        CHANNEL_MEDIA_RELAY_STATE[CHANNEL_MEDIA_RELAY_STATE["RELAY_STATE_FAILURE"] = 3] = "RELAY_STATE_FAILURE";
    })(CHANNEL_MEDIA_RELAY_STATE = agora.CHANNEL_MEDIA_RELAY_STATE || (agora.CHANNEL_MEDIA_RELAY_STATE = {}));
    agora.STANDARD_BITRATE = 0;
    agora.COMPATIBLE_BITRATE = -1;
    agora.DEFAULT_MIN_BITRATE = -1;
    var RTMP_STREAM_LIFE_CYCLE_TYPE;
    (function (RTMP_STREAM_LIFE_CYCLE_TYPE) {
        RTMP_STREAM_LIFE_CYCLE_TYPE[RTMP_STREAM_LIFE_CYCLE_TYPE["RTMP_STREAM_LIFE_CYCLE_BIND2CHANNEL"] = 1] = "RTMP_STREAM_LIFE_CYCLE_BIND2CHANNEL";
        RTMP_STREAM_LIFE_CYCLE_TYPE[RTMP_STREAM_LIFE_CYCLE_TYPE["RTMP_STREAM_LIFE_CYCLE_BIND2OWNER"] = 2] = "RTMP_STREAM_LIFE_CYCLE_BIND2OWNER";
    })(RTMP_STREAM_LIFE_CYCLE_TYPE = agora.RTMP_STREAM_LIFE_CYCLE_TYPE || (agora.RTMP_STREAM_LIFE_CYCLE_TYPE = {}));
    var VideoContentHint;
    (function (VideoContentHint) {
        VideoContentHint[VideoContentHint["CONTENT_HINT_NONE"] = 0] = "CONTENT_HINT_NONE";
        VideoContentHint[VideoContentHint["CONTENT_HINT_MOTION"] = 1] = "CONTENT_HINT_MOTION";
        VideoContentHint[VideoContentHint["CONTENT_HINT_DETAILS"] = 2] = "CONTENT_HINT_DETAILS";
    })(VideoContentHint = agora.VideoContentHint || (agora.VideoContentHint = {}));
    var AREA_CODE;
    (function (AREA_CODE) {
        AREA_CODE[AREA_CODE["AREA_CODE_CN"] = 1] = "AREA_CODE_CN";
        AREA_CODE[AREA_CODE["AREA_CODE_NA"] = 2] = "AREA_CODE_NA";
        AREA_CODE[AREA_CODE["AREA_CODE_EUR"] = 4] = "AREA_CODE_EUR";
        AREA_CODE[AREA_CODE["AREA_CODE_AS"] = 8] = "AREA_CODE_AS";
        AREA_CODE[AREA_CODE["AREA_CODE_JAPAN"] = 16] = "AREA_CODE_JAPAN";
        AREA_CODE[AREA_CODE["AREA_CODE_INDIA"] = 32] = "AREA_CODE_INDIA";
        AREA_CODE[AREA_CODE["AREA_CODE_GLOBAL"] = 4294967295] = "AREA_CODE_GLOBAL";
    })(AREA_CODE = agora.AREA_CODE || (agora.AREA_CODE = {}));
    var ENCRYPTION_CONFIG;
    (function (ENCRYPTION_CONFIG) {
        ENCRYPTION_CONFIG[ENCRYPTION_CONFIG["ENCRYPTION_FORCE_SETTING"] = 1] = "ENCRYPTION_FORCE_SETTING";
        ENCRYPTION_CONFIG[ENCRYPTION_CONFIG["ENCRYPTION_FORCE_DISABLE_PACKET"] = 2] = "ENCRYPTION_FORCE_DISABLE_PACKET";
    })(ENCRYPTION_CONFIG = agora.ENCRYPTION_CONFIG || (agora.ENCRYPTION_CONFIG = {}));
    var ENCRYPTION_MODE;
    (function (ENCRYPTION_MODE) {
        ENCRYPTION_MODE[ENCRYPTION_MODE["AES_128_XTS"] = 1] = "AES_128_XTS";
        ENCRYPTION_MODE[ENCRYPTION_MODE["AES_128_ECB"] = 2] = "AES_128_ECB";
        ENCRYPTION_MODE[ENCRYPTION_MODE["AES_256_XTS"] = 3] = "AES_256_XTS";
        ENCRYPTION_MODE[ENCRYPTION_MODE["SM4_128_ECB"] = 4] = "SM4_128_ECB";
        ENCRYPTION_MODE[ENCRYPTION_MODE["MODE_END"] = 5] = "MODE_END";
    })(ENCRYPTION_MODE = agora.ENCRYPTION_MODE || (agora.ENCRYPTION_MODE = {}));
    var ERROR_CODE_TYPE;
    (function (ERROR_CODE_TYPE) {
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_OK"] = 0] = "ERR_OK";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_FAILED"] = 1] = "ERR_FAILED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVALID_ARGUMENT"] = 2] = "ERR_INVALID_ARGUMENT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NOT_READY"] = 3] = "ERR_NOT_READY";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NOT_SUPPORTED"] = 4] = "ERR_NOT_SUPPORTED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_REFUSED"] = 5] = "ERR_REFUSED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_BUFFER_TOO_SMALL"] = 6] = "ERR_BUFFER_TOO_SMALL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NOT_INITIALIZED"] = 7] = "ERR_NOT_INITIALIZED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NO_PERMISSION"] = 9] = "ERR_NO_PERMISSION";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_TIMEDOUT"] = 10] = "ERR_TIMEDOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_CANCELED"] = 11] = "ERR_CANCELED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_TOO_OFTEN"] = 12] = "ERR_TOO_OFTEN";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_BIND_SOCKET"] = 13] = "ERR_BIND_SOCKET";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NET_DOWN"] = 14] = "ERR_NET_DOWN";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NET_NOBUFS"] = 15] = "ERR_NET_NOBUFS";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_JOIN_CHANNEL_REJECTED"] = 17] = "ERR_JOIN_CHANNEL_REJECTED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LEAVE_CHANNEL_REJECTED"] = 18] = "ERR_LEAVE_CHANNEL_REJECTED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ALREADY_IN_USE"] = 19] = "ERR_ALREADY_IN_USE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ABORTED"] = 20] = "ERR_ABORTED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INIT_NET_ENGINE"] = 21] = "ERR_INIT_NET_ENGINE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_RESOURCE_LIMITED"] = 22] = "ERR_RESOURCE_LIMITED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVALID_APP_ID"] = 101] = "ERR_INVALID_APP_ID";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVALID_CHANNEL_NAME"] = 102] = "ERR_INVALID_CHANNEL_NAME";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NO_SERVER_RESOURCES"] = 103] = "ERR_NO_SERVER_RESOURCES";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_TOKEN_EXPIRED"] = 109] = "ERR_TOKEN_EXPIRED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVALID_TOKEN"] = 110] = "ERR_INVALID_TOKEN";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_CONNECTION_INTERRUPTED"] = 111] = "ERR_CONNECTION_INTERRUPTED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_CONNECTION_LOST"] = 112] = "ERR_CONNECTION_LOST";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_NOT_IN_CHANNEL"] = 113] = "ERR_NOT_IN_CHANNEL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_SIZE_TOO_LARGE"] = 114] = "ERR_SIZE_TOO_LARGE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_BITRATE_LIMIT"] = 115] = "ERR_BITRATE_LIMIT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_TOO_MANY_DATA_STREAMS"] = 116] = "ERR_TOO_MANY_DATA_STREAMS";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_STREAM_MESSAGE_TIMEOUT"] = 117] = "ERR_STREAM_MESSAGE_TIMEOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED"] = 119] = "ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_DECRYPTION_FAILED"] = 120] = "ERR_DECRYPTION_FAILED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_CLIENT_IS_BANNED_BY_SERVER"] = 123] = "ERR_CLIENT_IS_BANNED_BY_SERVER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_WATERMARK_PARAM"] = 124] = "ERR_WATERMARK_PARAM";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_WATERMARK_PATH"] = 125] = "ERR_WATERMARK_PATH";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_WATERMARK_PNG"] = 126] = "ERR_WATERMARK_PNG";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_WATERMARKR_INFO"] = 127] = "ERR_WATERMARKR_INFO";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_WATERMARK_ARGB"] = 128] = "ERR_WATERMARK_ARGB";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_WATERMARK_READ"] = 129] = "ERR_WATERMARK_READ";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH"] = 130] = "ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVALID_USER_ACCOUNT"] = 134] = "ERR_INVALID_USER_ACCOUNT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_PUBLISH_STREAM_CDN_ERROR"] = 151] = "ERR_PUBLISH_STREAM_CDN_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_PUBLISH_STREAM_NUM_REACH_LIMIT"] = 152] = "ERR_PUBLISH_STREAM_NUM_REACH_LIMIT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_PUBLISH_STREAM_NOT_AUTHORIZED"] = 153] = "ERR_PUBLISH_STREAM_NOT_AUTHORIZED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_PUBLISH_STREAM_INTERNAL_SERVER_ERROR"] = 154] = "ERR_PUBLISH_STREAM_INTERNAL_SERVER_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_PUBLISH_STREAM_NOT_FOUND"] = 155] = "ERR_PUBLISH_STREAM_NOT_FOUND";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_PUBLISH_STREAM_FORMAT_NOT_SUPPORTED"] = 156] = "ERR_PUBLISH_STREAM_FORMAT_NOT_SUPPORTED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_OTHER"] = 400] = "ERR_LOGOUT_OTHER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_USER"] = 401] = "ERR_LOGOUT_USER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_NET"] = 402] = "ERR_LOGOUT_NET";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_KICKED"] = 403] = "ERR_LOGOUT_KICKED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_PACKET"] = 404] = "ERR_LOGOUT_PACKET";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_TOKEN_EXPIRED"] = 405] = "ERR_LOGOUT_TOKEN_EXPIRED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_OLDVERSION"] = 406] = "ERR_LOGOUT_OLDVERSION";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_TOKEN_WRONG"] = 407] = "ERR_LOGOUT_TOKEN_WRONG";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGOUT_ALREADY_LOGOUT"] = 408] = "ERR_LOGOUT_ALREADY_LOGOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_OTHER"] = 420] = "ERR_LOGIN_OTHER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_NET"] = 421] = "ERR_LOGIN_NET";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_FAILED"] = 422] = "ERR_LOGIN_FAILED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_CANCELED"] = 423] = "ERR_LOGIN_CANCELED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_TOKEN_EXPIRED"] = 424] = "ERR_LOGIN_TOKEN_EXPIRED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_OLD_VERSION"] = 425] = "ERR_LOGIN_OLD_VERSION";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_TOKEN_WRONG"] = 426] = "ERR_LOGIN_TOKEN_WRONG";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_TOKEN_KICKED"] = 427] = "ERR_LOGIN_TOKEN_KICKED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOGIN_ALREADY_LOGIN"] = 428] = "ERR_LOGIN_ALREADY_LOGIN";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_JOIN_CHANNEL_OTHER"] = 440] = "ERR_JOIN_CHANNEL_OTHER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_SEND_MESSAGE_OTHER"] = 440] = "ERR_SEND_MESSAGE_OTHER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_SEND_MESSAGE_TIMEOUT"] = 441] = "ERR_SEND_MESSAGE_TIMEOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_QUERY_USERNUM_OTHER"] = 450] = "ERR_QUERY_USERNUM_OTHER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_QUERY_USERNUM_TIMEOUT"] = 451] = "ERR_QUERY_USERNUM_TIMEOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_QUERY_USERNUM_BYUSER"] = 452] = "ERR_QUERY_USERNUM_BYUSER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LEAVE_CHANNEL_OTHER"] = 460] = "ERR_LEAVE_CHANNEL_OTHER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LEAVE_CHANNEL_KICKED"] = 461] = "ERR_LEAVE_CHANNEL_KICKED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LEAVE_CHANNEL_BYUSER"] = 462] = "ERR_LEAVE_CHANNEL_BYUSER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LEAVE_CHANNEL_LOGOUT"] = 463] = "ERR_LEAVE_CHANNEL_LOGOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LEAVE_CHANNEL_DISCONNECTED"] = 464] = "ERR_LEAVE_CHANNEL_DISCONNECTED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVITE_OTHER"] = 470] = "ERR_INVITE_OTHER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVITE_REINVITE"] = 471] = "ERR_INVITE_REINVITE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVITE_NET"] = 472] = "ERR_INVITE_NET";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVITE_PEER_OFFLINE"] = 473] = "ERR_INVITE_PEER_OFFLINE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVITE_TIMEOUT"] = 474] = "ERR_INVITE_TIMEOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_INVITE_CANT_RECV"] = 475] = "ERR_INVITE_CANT_RECV";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_LOAD_MEDIA_ENGINE"] = 1001] = "ERR_LOAD_MEDIA_ENGINE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_START_CALL"] = 1002] = "ERR_START_CALL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_START_CAMERA"] = 1003] = "ERR_START_CAMERA";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_START_VIDEO_RENDER"] = 1004] = "ERR_START_VIDEO_RENDER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_GENERAL_ERROR"] = 1005] = "ERR_ADM_GENERAL_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_JAVA_RESOURCE"] = 1006] = "ERR_ADM_JAVA_RESOURCE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_SAMPLE_RATE"] = 1007] = "ERR_ADM_SAMPLE_RATE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_INIT_PLAYOUT"] = 1008] = "ERR_ADM_INIT_PLAYOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_START_PLAYOUT"] = 1009] = "ERR_ADM_START_PLAYOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_STOP_PLAYOUT"] = 1010] = "ERR_ADM_STOP_PLAYOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_INIT_RECORDING"] = 1011] = "ERR_ADM_INIT_RECORDING";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_START_RECORDING"] = 1012] = "ERR_ADM_START_RECORDING";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_STOP_RECORDING"] = 1013] = "ERR_ADM_STOP_RECORDING";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_RUNTIME_PLAYOUT_ERROR"] = 1015] = "ERR_ADM_RUNTIME_PLAYOUT_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_RUNTIME_RECORDING_ERROR"] = 1017] = "ERR_ADM_RUNTIME_RECORDING_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_RECORD_AUDIO_FAILED"] = 1018] = "ERR_ADM_RECORD_AUDIO_FAILED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_INIT_LOOPBACK"] = 1022] = "ERR_ADM_INIT_LOOPBACK";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_START_LOOPBACK"] = 1023] = "ERR_ADM_START_LOOPBACK";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_NO_PERMISSION"] = 1027] = "ERR_ADM_NO_PERMISSION";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_RECORD_AUDIO_IS_ACTIVE"] = 1033] = "ERR_ADM_RECORD_AUDIO_IS_ACTIVE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_JNI_JAVA_RESOURCE"] = 1101] = "ERR_ADM_ANDROID_JNI_JAVA_RESOURCE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_JNI_NO_RECORD_FREQUENCY"] = 1108] = "ERR_ADM_ANDROID_JNI_NO_RECORD_FREQUENCY";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_JNI_NO_PLAYBACK_FREQUENCY"] = 1109] = "ERR_ADM_ANDROID_JNI_NO_PLAYBACK_FREQUENCY";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_JNI_JAVA_START_RECORD"] = 1111] = "ERR_ADM_ANDROID_JNI_JAVA_START_RECORD";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_JNI_JAVA_START_PLAYBACK"] = 1112] = "ERR_ADM_ANDROID_JNI_JAVA_START_PLAYBACK";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_JNI_JAVA_RECORD_ERROR"] = 1115] = "ERR_ADM_ANDROID_JNI_JAVA_RECORD_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_OPENSL_CREATE_ENGINE"] = 1151] = "ERR_ADM_ANDROID_OPENSL_CREATE_ENGINE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_RECORDER"] = 1153] = "ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_RECORDER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_OPENSL_START_RECORDER_THREAD"] = 1156] = "ERR_ADM_ANDROID_OPENSL_START_RECORDER_THREAD";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_PLAYER"] = 1157] = "ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_PLAYER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_ANDROID_OPENSL_START_PLAYER_THREAD"] = 1160] = "ERR_ADM_ANDROID_OPENSL_START_PLAYER_THREAD";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_IOS_INPUT_NOT_AVAILABLE"] = 1201] = "ERR_ADM_IOS_INPUT_NOT_AVAILABLE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_IOS_ACTIVATE_SESSION_FAIL"] = 1206] = "ERR_ADM_IOS_ACTIVATE_SESSION_FAIL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_IOS_VPIO_INIT_FAIL"] = 1210] = "ERR_ADM_IOS_VPIO_INIT_FAIL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_IOS_VPIO_REINIT_FAIL"] = 1213] = "ERR_ADM_IOS_VPIO_REINIT_FAIL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_IOS_VPIO_RESTART_FAIL"] = 1214] = "ERR_ADM_IOS_VPIO_RESTART_FAIL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_IOS_SET_RENDER_CALLBACK_FAIL"] = 1219] = "ERR_ADM_IOS_SET_RENDER_CALLBACK_FAIL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_IOS_SESSION_SAMPLERATR_ZERO"] = 1221] = "ERR_ADM_IOS_SESSION_SAMPLERATR_ZERO";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_INIT"] = 1301] = "ERR_ADM_WIN_CORE_INIT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_INIT_RECORDING"] = 1303] = "ERR_ADM_WIN_CORE_INIT_RECORDING";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_INIT_PLAYOUT"] = 1306] = "ERR_ADM_WIN_CORE_INIT_PLAYOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_INIT_PLAYOUT_NULL"] = 1307] = "ERR_ADM_WIN_CORE_INIT_PLAYOUT_NULL";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_START_RECORDING"] = 1309] = "ERR_ADM_WIN_CORE_START_RECORDING";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_CREATE_REC_THREAD"] = 1311] = "ERR_ADM_WIN_CORE_CREATE_REC_THREAD";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_CAPTURE_NOT_STARTUP"] = 1314] = "ERR_ADM_WIN_CORE_CAPTURE_NOT_STARTUP";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_CREATE_RENDER_THREAD"] = 1319] = "ERR_ADM_WIN_CORE_CREATE_RENDER_THREAD";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_RENDER_NOT_STARTUP"] = 1320] = "ERR_ADM_WIN_CORE_RENDER_NOT_STARTUP";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_NO_RECORDING_DEVICE"] = 1322] = "ERR_ADM_WIN_CORE_NO_RECORDING_DEVICE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_CORE_NO_PLAYOUT_DEVICE"] = 1323] = "ERR_ADM_WIN_CORE_NO_PLAYOUT_DEVICE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_WAVE_INIT"] = 1351] = "ERR_ADM_WIN_WAVE_INIT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_WAVE_INIT_RECORDING"] = 1353] = "ERR_ADM_WIN_WAVE_INIT_RECORDING";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_WAVE_INIT_MICROPHONE"] = 1354] = "ERR_ADM_WIN_WAVE_INIT_MICROPHONE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_WAVE_INIT_PLAYOUT"] = 1355] = "ERR_ADM_WIN_WAVE_INIT_PLAYOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_WAVE_INIT_SPEAKER"] = 1356] = "ERR_ADM_WIN_WAVE_INIT_SPEAKER";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_WAVE_START_RECORDING"] = 1357] = "ERR_ADM_WIN_WAVE_START_RECORDING";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_WIN_WAVE_START_PLAYOUT"] = 1358] = "ERR_ADM_WIN_WAVE_START_PLAYOUT";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_NO_RECORDING_DEVICE"] = 1359] = "ERR_ADM_NO_RECORDING_DEVICE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_ADM_NO_PLAYOUT_DEVICE"] = 1360] = "ERR_ADM_NO_PLAYOUT_DEVICE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_VDM_CAMERA_NOT_AUTHORIZED"] = 1501] = "ERR_VDM_CAMERA_NOT_AUTHORIZED";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_VDM_WIN_DEVICE_IN_USE"] = 1502] = "ERR_VDM_WIN_DEVICE_IN_USE";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_VCM_UNKNOWN_ERROR"] = 1600] = "ERR_VCM_UNKNOWN_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_VCM_ENCODER_INIT_ERROR"] = 1601] = "ERR_VCM_ENCODER_INIT_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_VCM_ENCODER_ENCODE_ERROR"] = 1602] = "ERR_VCM_ENCODER_ENCODE_ERROR";
        ERROR_CODE_TYPE[ERROR_CODE_TYPE["ERR_VCM_ENCODER_SET_ERROR"] = 1603] = "ERR_VCM_ENCODER_SET_ERROR";
    })(ERROR_CODE_TYPE = agora.ERROR_CODE_TYPE || (agora.ERROR_CODE_TYPE = {}));
    var LIGHTENING_CONTRAST_LEVEL;
    (function (LIGHTENING_CONTRAST_LEVEL) {
        LIGHTENING_CONTRAST_LEVEL[LIGHTENING_CONTRAST_LEVEL["LIGHTENING_CONTRAST_LOW"] = 0] = "LIGHTENING_CONTRAST_LOW";
        LIGHTENING_CONTRAST_LEVEL[LIGHTENING_CONTRAST_LEVEL["LIGHTENING_CONTRAST_NORMAL"] = 1] = "LIGHTENING_CONTRAST_NORMAL";
        LIGHTENING_CONTRAST_LEVEL[LIGHTENING_CONTRAST_LEVEL["LIGHTENING_CONTRAST_HIGH"] = 2] = "LIGHTENING_CONTRAST_HIGH";
    })(LIGHTENING_CONTRAST_LEVEL = agora.LIGHTENING_CONTRAST_LEVEL || (agora.LIGHTENING_CONTRAST_LEVEL = {}));
    var LOG_FILTER_TYPE;
    (function (LOG_FILTER_TYPE) {
        LOG_FILTER_TYPE[LOG_FILTER_TYPE["LOG_FILTER_OFF"] = 0] = "LOG_FILTER_OFF";
        LOG_FILTER_TYPE[LOG_FILTER_TYPE["LOG_FILTER_DEBUG"] = 2063] = "LOG_FILTER_DEBUG";
        LOG_FILTER_TYPE[LOG_FILTER_TYPE["LOG_FILTER_INFO"] = 15] = "LOG_FILTER_INFO";
        LOG_FILTER_TYPE[LOG_FILTER_TYPE["LOG_FILTER_WARN"] = 14] = "LOG_FILTER_WARN";
        LOG_FILTER_TYPE[LOG_FILTER_TYPE["LOG_FILTER_ERROR"] = 12] = "LOG_FILTER_ERROR";
        LOG_FILTER_TYPE[LOG_FILTER_TYPE["LOG_FILTER_CRITICAL"] = 8] = "LOG_FILTER_CRITICAL";
        LOG_FILTER_TYPE[LOG_FILTER_TYPE["LOG_FILTER_MASK"] = 2063] = "LOG_FILTER_MASK";
    })(LOG_FILTER_TYPE = agora.LOG_FILTER_TYPE || (agora.LOG_FILTER_TYPE = {}));
    var METADATA_TYPE;
    (function (METADATA_TYPE) {
        METADATA_TYPE[METADATA_TYPE["UNKNOWN_METADATA"] = -1] = "UNKNOWN_METADATA";
        METADATA_TYPE[METADATA_TYPE["VIDEO_METADATA"] = 0] = "VIDEO_METADATA";
    })(METADATA_TYPE = agora.METADATA_TYPE || (agora.METADATA_TYPE = {}));
    var VIDEO_PIXEL_FORMAT;
    (function (VIDEO_PIXEL_FORMAT) {
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_UNKNOWN"] = 0] = "VIDEO_PIXEL_UNKNOWN";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_I420"] = 1] = "VIDEO_PIXEL_I420";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_BGRA"] = 2] = "VIDEO_PIXEL_BGRA";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_NV21"] = 3] = "VIDEO_PIXEL_NV21";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_RGBA"] = 4] = "VIDEO_PIXEL_RGBA";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_IMC2"] = 5] = "VIDEO_PIXEL_IMC2";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_ARGB"] = 7] = "VIDEO_PIXEL_ARGB";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_NV12"] = 8] = "VIDEO_PIXEL_NV12";
        VIDEO_PIXEL_FORMAT[VIDEO_PIXEL_FORMAT["VIDEO_PIXEL_I422"] = 16] = "VIDEO_PIXEL_I422";
    })(VIDEO_PIXEL_FORMAT = agora.VIDEO_PIXEL_FORMAT || (agora.VIDEO_PIXEL_FORMAT = {}));
    var WARN_CODE_TYPE;
    (function (WARN_CODE_TYPE) {
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_INVALID_VIEW"] = 8] = "WARN_INVALID_VIEW";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_INIT_VIDEO"] = 16] = "WARN_INIT_VIDEO";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_PENDING"] = 20] = "WARN_PENDING";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_NO_AVAILABLE_CHANNEL"] = 103] = "WARN_NO_AVAILABLE_CHANNEL";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_LOOKUP_CHANNEL_TIMEOUT"] = 104] = "WARN_LOOKUP_CHANNEL_TIMEOUT";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_LOOKUP_CHANNEL_REJECTED"] = 105] = "WARN_LOOKUP_CHANNEL_REJECTED";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_OPEN_CHANNEL_TIMEOUT"] = 106] = "WARN_OPEN_CHANNEL_TIMEOUT";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_OPEN_CHANNEL_REJECTED"] = 107] = "WARN_OPEN_CHANNEL_REJECTED";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_SWITCH_LIVE_VIDEO_TIMEOUT"] = 111] = "WARN_SWITCH_LIVE_VIDEO_TIMEOUT";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_SET_CLIENT_ROLE_TIMEOUT"] = 118] = "WARN_SET_CLIENT_ROLE_TIMEOUT";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_OPEN_CHANNEL_INVALID_TICKET"] = 121] = "WARN_OPEN_CHANNEL_INVALID_TICKET";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_OPEN_CHANNEL_TRY_NEXT_VOS"] = 122] = "WARN_OPEN_CHANNEL_TRY_NEXT_VOS";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_CHANNEL_CONNECTION_UNRECOVERABLE"] = 131] = "WARN_CHANNEL_CONNECTION_UNRECOVERABLE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_CHANNEL_CONNECTION_IP_CHANGED"] = 132] = "WARN_CHANNEL_CONNECTION_IP_CHANGED";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_CHANNEL_CONNECTION_PORT_CHANGED"] = 133] = "WARN_CHANNEL_CONNECTION_PORT_CHANGED";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_AUDIO_MIXING_OPEN_ERROR"] = 701] = "WARN_AUDIO_MIXING_OPEN_ERROR";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_RUNTIME_PLAYOUT_WARNING"] = 1014] = "WARN_ADM_RUNTIME_PLAYOUT_WARNING";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_RUNTIME_RECORDING_WARNING"] = 1016] = "WARN_ADM_RUNTIME_RECORDING_WARNING";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_RECORD_AUDIO_SILENCE"] = 1019] = "WARN_ADM_RECORD_AUDIO_SILENCE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_PLAYOUT_MALFUNCTION"] = 1020] = "WARN_ADM_PLAYOUT_MALFUNCTION";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_RECORD_MALFUNCTION"] = 1021] = "WARN_ADM_RECORD_MALFUNCTION";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_CALL_INTERRUPTION"] = 1025] = "WARN_ADM_CALL_INTERRUPTION";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_IOS_CATEGORY_NOT_PLAYANDRECORD"] = 1029] = "WARN_ADM_IOS_CATEGORY_NOT_PLAYANDRECORD";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_RECORD_AUDIO_LOWLEVEL"] = 1031] = "WARN_ADM_RECORD_AUDIO_LOWLEVEL";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL"] = 1032] = "WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_RECORD_AUDIO_IS_ACTIVE"] = 1033] = "WARN_ADM_RECORD_AUDIO_IS_ACTIVE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_WINDOWS_NO_DATA_READY_EVENT"] = 1040] = "WARN_ADM_WINDOWS_NO_DATA_READY_EVENT";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_INCONSISTENT_AUDIO_DEVICE"] = 1042] = "WARN_ADM_INCONSISTENT_AUDIO_DEVICE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_APM_HOWLING"] = 1051] = "WARN_APM_HOWLING";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_GLITCH_STATE"] = 1052] = "WARN_ADM_GLITCH_STATE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_APM_RESIDUAL_ECHO"] = 1053] = "WARN_APM_RESIDUAL_ECHO";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_WIN_CORE_NO_RECORDING_DEVICE"] = 1322] = "WARN_ADM_WIN_CORE_NO_RECORDING_DEVICE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_WIN_CORE_NO_PLAYOUT_DEVICE"] = 1323] = "WARN_ADM_WIN_CORE_NO_PLAYOUT_DEVICE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_ADM_WIN_CORE_IMPROPER_CAPTURE_RELEASE"] = 1324] = "WARN_ADM_WIN_CORE_IMPROPER_CAPTURE_RELEASE";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_SUPER_RESOLUTION_STREAM_OVER_LIMITATION"] = 1610] = "WARN_SUPER_RESOLUTION_STREAM_OVER_LIMITATION";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_SUPER_RESOLUTION_USER_COUNT_OVER_LIMITATION"] = 1611] = "WARN_SUPER_RESOLUTION_USER_COUNT_OVER_LIMITATION";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_SUPER_RESOLUTION_DEVICE_NOT_SUPPORTED"] = 1612] = "WARN_SUPER_RESOLUTION_DEVICE_NOT_SUPPORTED";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_RTM_LOGIN_TIMEOUT"] = 2005] = "WARN_RTM_LOGIN_TIMEOUT";
        WARN_CODE_TYPE[WARN_CODE_TYPE["WARN_RTM_KEEP_ALIVE_TIMEOUT"] = 2009] = "WARN_RTM_KEEP_ALIVE_TIMEOUT";
    })(WARN_CODE_TYPE = agora.WARN_CODE_TYPE || (agora.WARN_CODE_TYPE = {}));
})(agora || (agora = {}));
(function (agora) {
    var VideoDimensions = (function () {
        function VideoDimensions(width, height) {
            if (width === void 0) { width = 640; }
            if (height === void 0) { height = 480; }
            this.width = width;
            this.height = height;
        }
        return VideoDimensions;
    }());
    agora.VideoDimensions = VideoDimensions;
    var VideoEncoderConfiguration = (function () {
        function VideoEncoderConfiguration(dimensions, frameRate, minFrameRate, bitrate, minBitrate, orientationMode, degradationPreference, mirrorMode) {
            if (dimensions === void 0) { dimensions = new VideoDimensions(); }
            if (frameRate === void 0) { frameRate = agora.FRAME_RATE.FRAME_RATE_FPS_15; }
            if (minFrameRate === void 0) { minFrameRate = -1; }
            if (bitrate === void 0) { bitrate = agora.STANDARD_BITRATE; }
            if (minBitrate === void 0) { minBitrate = agora.DEFAULT_MIN_BITRATE; }
            if (orientationMode === void 0) { orientationMode = agora.ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE; }
            if (degradationPreference === void 0) { degradationPreference = agora.DEGRADATION_PREFERENCE.MAINTAIN_QUALITY; }
            if (mirrorMode === void 0) { mirrorMode = agora.VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_AUTO; }
            this.dimensions = dimensions;
            this.frameRate = frameRate;
            this.minFrameRate = minFrameRate;
            this.bitrate = bitrate;
            this.minBitrate = minBitrate;
            this.orientationMode = orientationMode;
            this.degradationPreference = degradationPreference;
            this.mirrorMode = mirrorMode;
        }
        return VideoEncoderConfiguration;
    }());
    agora.VideoEncoderConfiguration = VideoEncoderConfiguration;
    var TranscodingUser = (function () {
        function TranscodingUser(uid, x, y, width, height, zOrder, alpha, audioChannel) {
            if (alpha === void 0) { alpha = 1.0; }
            this.uid = uid;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.zOrder = zOrder;
            this.alpha = alpha;
            this.audioChannel = audioChannel;
        }
        return TranscodingUser;
    }());
    agora.TranscodingUser = TranscodingUser;
    var RtcImage = (function () {
        function RtcImage(url, x, y, width, height) {
            this.url = url;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }
        return RtcImage;
    }());
    agora.RtcImage = RtcImage;
    var LiveStreamAdvancedFeature = (function () {
        function LiveStreamAdvancedFeature(featureName, opened) {
            this.featureName = featureName;
            this.opened = opened;
        }
        LiveStreamAdvancedFeature.LBHQ = "lbhq";
        LiveStreamAdvancedFeature.VEO = "veo";
        return LiveStreamAdvancedFeature;
    }());
    agora.LiveStreamAdvancedFeature = LiveStreamAdvancedFeature;
    var LiveTranscoding = (function () {
        function LiveTranscoding(width, height, videoBitrate, videoFramerate, lowLatency, videoGop, videoCodecProfile, backgroundColor, userCount, transcodingUsers, transcodingExtraInfo, metadata, watermark, backgroundImage, audioSampleRate, audioBitrate, audioChannels, audioCodecProfile, advancedFeatures, advancedFeatureCount) {
            if (width === void 0) { width = 360; }
            if (height === void 0) { height = 640; }
            if (videoBitrate === void 0) { videoBitrate = 400; }
            if (videoFramerate === void 0) { videoFramerate = 15; }
            if (lowLatency === void 0) { lowLatency = false; }
            if (videoGop === void 0) { videoGop = 30; }
            if (videoCodecProfile === void 0) { videoCodecProfile = agora.VIDEO_CODEC_PROFILE_TYPE.VIDEO_CODEC_PROFILE_HIGH; }
            if (backgroundColor === void 0) { backgroundColor = 0x000000; }
            if (userCount === void 0) { userCount = 0; }
            if (audioSampleRate === void 0) { audioSampleRate = agora.AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_48000; }
            if (audioBitrate === void 0) { audioBitrate = 48; }
            if (audioChannels === void 0) { audioChannels = 1; }
            if (audioCodecProfile === void 0) { audioCodecProfile = agora.AUDIO_CODEC_PROFILE_TYPE.AUDIO_CODEC_PROFILE_LC_AAC; }
            if (advancedFeatureCount === void 0) { advancedFeatureCount = 0; }
            this.width = width;
            this.height = height;
            this.videoBitrate = videoBitrate;
            this.videoFramerate = videoFramerate;
            this.lowLatency = lowLatency;
            this.videoGop = videoGop;
            this.videoCodecProfile = videoCodecProfile;
            this.backgroundColor = backgroundColor;
            this.userCount = userCount;
            this.transcodingUsers = transcodingUsers;
            this.transcodingExtraInfo = transcodingExtraInfo;
            this.metadata = metadata;
            this.watermark = watermark;
            this.backgroundImage = backgroundImage;
            this.audioSampleRate = audioSampleRate;
            this.audioBitrate = audioBitrate;
            this.audioChannels = audioChannels;
            this.audioCodecProfile = audioCodecProfile;
            this.advancedFeatures = advancedFeatures;
            this.advancedFeatureCount = advancedFeatureCount;
        }
        return LiveTranscoding;
    }());
    agora.LiveTranscoding = LiveTranscoding;
    var CameraCapturerConfiguration = (function () {
        function CameraCapturerConfiguration(preference, cameraDirection) {
            this.preference = preference;
            this.cameraDirection = cameraDirection;
        }
        return CameraCapturerConfiguration;
    }());
    agora.CameraCapturerConfiguration = CameraCapturerConfiguration;
    var InjectStreamConfig = (function () {
        function InjectStreamConfig(width, height, videoGop, videoFramerate, videoBitrate, audioSampleRate, audioBitrate, audioChannels) {
            if (width === void 0) { width = 0; }
            if (height === void 0) { height = 0; }
            if (videoGop === void 0) { videoGop = 30; }
            if (videoFramerate === void 0) { videoFramerate = 15; }
            if (videoBitrate === void 0) { videoBitrate = 400; }
            if (audioSampleRate === void 0) { audioSampleRate = agora.AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_48000; }
            if (audioBitrate === void 0) { audioBitrate = 48; }
            if (audioChannels === void 0) { audioChannels = 1; }
            this.width = width;
            this.height = height;
            this.videoGop = videoGop;
            this.videoFramerate = videoFramerate;
            this.videoBitrate = videoBitrate;
            this.audioSampleRate = audioSampleRate;
            this.audioBitrate = audioBitrate;
            this.audioChannels = audioChannels;
        }
        return InjectStreamConfig;
    }());
    agora.InjectStreamConfig = InjectStreamConfig;
    var ChannelMediaInfo = (function () {
        function ChannelMediaInfo(channelName, token, uid) {
            this.channelName = channelName;
            this.token = token;
            this.uid = uid;
        }
        return ChannelMediaInfo;
    }());
    agora.ChannelMediaInfo = ChannelMediaInfo;
    var ChannelMediaRelayConfiguration = (function () {
        function ChannelMediaRelayConfiguration(srcInfo, destInfos, destCount) {
            this.srcInfo = srcInfo;
            this.destInfos = destInfos;
            this.destCount = destCount;
        }
        return ChannelMediaRelayConfiguration;
    }());
    agora.ChannelMediaRelayConfiguration = ChannelMediaRelayConfiguration;
    var Rectangle = (function () {
        function Rectangle(x, y, width, height) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (width === void 0) { width = 0; }
            if (height === void 0) { height = 0; }
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }
        return Rectangle;
    }());
    agora.Rectangle = Rectangle;
    var Rect = (function () {
        function Rect(top, left, bottom, right) {
            if (top === void 0) { top = 0; }
            if (left === void 0) { left = 0; }
            if (bottom === void 0) { bottom = 0; }
            if (right === void 0) { right = 0; }
            this.top = top;
            this.left = left;
            this.bottom = bottom;
            this.right = right;
        }
        return Rect;
    }());
    agora.Rect = Rect;
    var WatermarkOptions = (function () {
        function WatermarkOptions(visibleInPreview, positionInLandscapeMode, positionInPortraitMode) {
            if (visibleInPreview === void 0) { visibleInPreview = true; }
            if (positionInLandscapeMode === void 0) { positionInLandscapeMode = new Rectangle(); }
            if (positionInPortraitMode === void 0) { positionInPortraitMode = new Rectangle(); }
            this.visibleInPreview = visibleInPreview;
            this.positionInLandscapeMode = positionInLandscapeMode;
            this.positionInPortraitMode = positionInPortraitMode;
        }
        return WatermarkOptions;
    }());
    agora.WatermarkOptions = WatermarkOptions;
    var ScreenCaptureParameters = (function () {
        function ScreenCaptureParameters(dimensions, frameRate, bitrate, captureMouseCursor, windowFocus, excludeWindowList, excludeWindowCount) {
            if (dimensions === void 0) { dimensions = new VideoDimensions(1920, 1080); }
            if (frameRate === void 0) { frameRate = 5; }
            if (bitrate === void 0) { bitrate = agora.STANDARD_BITRATE; }
            if (captureMouseCursor === void 0) { captureMouseCursor = true; }
            if (windowFocus === void 0) { windowFocus = false; }
            if (excludeWindowCount === void 0) { excludeWindowCount = 0; }
            this.dimensions = dimensions;
            this.frameRate = frameRate;
            this.bitrate = bitrate;
            this.captureMouseCursor = captureMouseCursor;
            this.windowFocus = windowFocus;
            this.excludeWindowList = excludeWindowList;
            this.excludeWindowCount = excludeWindowCount;
        }
        return ScreenCaptureParameters;
    }());
    agora.ScreenCaptureParameters = ScreenCaptureParameters;
    var VideoCanvas = (function () {
        function VideoCanvas(view, renderMode, channelId, uid, priv, mirrorMode) {
            if (renderMode === void 0) { renderMode = agora.RENDER_MODE_TYPE.RENDER_MODE_HIDDEN; }
            if (uid === void 0) { uid = 0; }
            if (mirrorMode === void 0) { mirrorMode = agora.VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_AUTO; }
            this.view = view;
            this.renderMode = renderMode;
            this.channelId = channelId;
            this.uid = uid;
            this.priv = priv;
            this.mirrorMode = mirrorMode;
        }
        return VideoCanvas;
    }());
    agora.VideoCanvas = VideoCanvas;
    var BeautyOptions = (function () {
        function BeautyOptions(lighteningContrastLevel, lighteningLevel, smoothnessLevel, rednessLevel) {
            if (lighteningContrastLevel === void 0) { lighteningContrastLevel = agora.LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_NORMAL; }
            if (lighteningLevel === void 0) { lighteningLevel = 0; }
            if (smoothnessLevel === void 0) { smoothnessLevel = 0; }
            if (rednessLevel === void 0) { rednessLevel = 0; }
            this.lighteningContrastLevel = lighteningContrastLevel;
            this.lighteningLevel = lighteningLevel;
            this.smoothnessLevel = smoothnessLevel;
            this.rednessLevel = rednessLevel;
        }
        return BeautyOptions;
    }());
    agora.BeautyOptions = BeautyOptions;
    var EncryptionConfig = (function () {
        function EncryptionConfig(encryptionMode, encryptionKey) {
            if (encryptionMode === void 0) { encryptionMode = agora.ENCRYPTION_MODE.AES_128_XTS; }
            this.encryptionMode = encryptionMode;
            this.encryptionKey = encryptionKey;
        }
        return EncryptionConfig;
    }());
    agora.EncryptionConfig = EncryptionConfig;
    var ChannelMediaOptions = (function () {
        function ChannelMediaOptions(autoSubscribeAudio, autoSubscribeVideo) {
            if (autoSubscribeAudio === void 0) { autoSubscribeAudio = true; }
            if (autoSubscribeVideo === void 0) { autoSubscribeVideo = true; }
            this.autoSubscribeAudio = autoSubscribeAudio;
            this.autoSubscribeVideo = autoSubscribeVideo;
        }
        return ChannelMediaOptions;
    }());
    agora.ChannelMediaOptions = ChannelMediaOptions;
    var Metadata = (function () {
        function Metadata(uid, size, buffer, timeStampMs) {
            this.uid = uid;
            this.size = size;
            this.buffer = buffer;
            this.timeStampMs = timeStampMs;
        }
        return Metadata;
    }());
    agora.Metadata = Metadata;
})(agora || (agora = {}));
(function (agora) {
    var isWeb = typeof AgoraRTC !== 'undefined';
    var event = new cc.EventTarget();
    var client;
    var localStream;
    var remoteStreams = new Map();
    if (!isWeb) {
        agora.bridge = new agoraCreator();
    }
    function initNativeEvent() {
        agora.bridge.onWarning = function (warn, msg) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onWarning', JSON.stringify({ warn: warn, msg: msg }));
            }
            event.emit('warning', warn, msg);
        };
        agora.bridge.onError = function (err, msg) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onError', JSON.stringify({ err: err, msg: msg }));
            }
            event.emit('error', err, msg);
        };
        agora.bridge.onJoinChannelSuccess = function (channel, uid, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onJoinChannelSuccess', JSON.stringify({ channel: channel, uid: uid, elapsed: elapsed }));
            }
            event.emit('join-channel-success', channel, uid, elapsed);
            event.emit('joinChannelSuccess', channel, uid, elapsed);
        };
        agora.bridge.onRejoinChannelSuccess = function (channel, uid, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRejoinChannelSuccess', JSON.stringify({ channel: channel, uid: uid, elapsed: elapsed }));
            }
            event.emit('rejoin-channel-success', channel, uid, elapsed);
            event.emit('rejoinChannelSuccess', channel, uid, elapsed);
        };
        agora.bridge.onLeaveChannel = function (stats) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLeaveChannel', JSON.stringify({ stats: stats }));
            }
            event.emit('leave-channel', stats);
            event.emit('leaveChannel', stats);
        };
        agora.bridge.onClientRoleChanged = function (oldRole, newRole) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onClientRoleChanged', JSON.stringify({ oldRole: oldRole, newRole: newRole }));
            }
            event.emit('client-role-changed', oldRole, newRole);
            event.emit('clientRoleChanged', oldRole, newRole);
        };
        agora.bridge.onUserJoined = function (uid, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onUserJoined', JSON.stringify({ uid: uid, elapsed: elapsed }));
            }
            event.emit('user-joined', uid, elapsed);
            event.emit('userJoined', uid, elapsed);
        };
        agora.bridge.onUserOffline = function (uid, reason) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onUserOffline', JSON.stringify({ uid: uid, reason: reason }));
            }
            event.emit('user-offline', uid, reason);
            event.emit('userOffline', uid, reason);
        };
        agora.bridge.onLastmileQuality = function (quality) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLastmileQuality', JSON.stringify({ quality: quality }));
            }
            event.emit('lastmileQuality', quality);
        };
        agora.bridge.onLastmileProbeResult = function (result) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLastmileProbeResult', JSON.stringify({ result: result }));
            }
            event.emit('lastmileProbeResult', result);
        };
        agora.bridge.onConnectionInterrupted = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onConnectionInterrupted', JSON.stringify({}));
            }
            event.emit('connection-interrupted');
            event.emit('connectionInterrupted');
        };
        agora.bridge.onConnectionLost = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onConnectionLost', JSON.stringify({}));
            }
            event.emit('connection-lost');
            event.emit('connectionLost');
        };
        agora.bridge.onConnectionBanned = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onConnectionBanned', JSON.stringify({}));
            }
            event.emit('connection-banned');
            event.emit('connectionBanned');
        };
        agora.bridge.onApiCallExecuted = function (err, api, result) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onApiCallExecuted', JSON.stringify({ err: err, api: api, result: result }));
            }
            event.emit('apiCallExecuted', err, api, result);
        };
        agora.bridge.onRequestToken = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRequestToken', JSON.stringify({}));
            }
            event.emit('request-token');
            event.emit('requestToken');
        };
        agora.bridge.onTokenPrivilegeWillExpire = function (token) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onTokenPrivilegeWillExpire', JSON.stringify({ token: token }));
            }
            event.emit('tokenPrivilegeWillExpire', token);
        };
        agora.bridge.onAudioQuality = function (uid, quality, delay, lost) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioQuality', JSON.stringify({ uid: uid, quality: quality, delay: delay, lost: lost }));
            }
            event.emit('audio-quality', uid, quality, delay, lost);
            event.emit('audioQuality', uid, quality, delay, lost);
        };
        agora.bridge.onRtcStats = function (stats) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRtcStats', JSON.stringify({ stats: stats }));
            }
            event.emit('rtcStats', stats);
        };
        agora.bridge.onNetworkQuality = function (uid, txQuality, rxQuality) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onNetworkQuality', JSON.stringify({ uid: uid, txQuality: txQuality, rxQuality: rxQuality }));
            }
            event.emit('network-quality', uid, txQuality, rxQuality);
            event.emit('networkQuality', uid, txQuality, rxQuality);
        };
        agora.bridge.onLocalVideoStats = function (stats) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLocalVideoStats', JSON.stringify({ stats: stats }));
            }
            event.emit('localVideoStats', stats);
        };
        agora.bridge.onRemoteVideoStats = function (stats) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteVideoStats', JSON.stringify({ stats: stats }));
            }
            event.emit('remoteVideoStats', stats);
        };
        agora.bridge.onLocalAudioStats = function (stats) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLocalAudioStats', JSON.stringify({ stats: stats }));
            }
            event.emit('localAudioStats', stats);
        };
        agora.bridge.onRemoteAudioStats = function (stats) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteAudioStats', JSON.stringify({ stats: stats }));
            }
            event.emit('remoteAudioStats', stats);
        };
        agora.bridge.onLocalAudioStateChanged = function (state, error) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLocalAudioStateChanged', JSON.stringify({ state: state, error: error }));
            }
            event.emit('localAudioStateChanged', state, error);
        };
        agora.bridge.onRemoteAudioStateChanged = function (uid, state, reason, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteAudioStateChanged', JSON.stringify({ uid: uid, state: state, reason: reason, elapsed: elapsed }));
            }
            event.emit('remoteAudioStateChanged', uid, state, reason, elapsed);
        };
        agora.bridge.onAudioPublishStateChanged = function (channel, oldState, newState, elapseSinceLastState) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioPublishStateChanged', JSON.stringify({
                    channel: channel,
                    oldState: oldState,
                    newState: newState,
                    elapseSinceLastState: elapseSinceLastState
                }));
            }
            event.emit('audioPublishStateChanged', channel, oldState, newState, elapseSinceLastState);
        };
        agora.bridge.onVideoPublishStateChanged = function (channel, oldState, newState, elapseSinceLastState) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onVideoPublishStateChanged', JSON.stringify({
                    channel: channel,
                    oldState: oldState,
                    newState: newState,
                    elapseSinceLastState: elapseSinceLastState
                }));
            }
            event.emit('videoPublishStateChanged', channel, oldState, newState, elapseSinceLastState);
        };
        agora.bridge.onAudioSubscribeStateChanged = function (channel, uid, oldState, newState, elapseSinceLastState) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioSubscribeStateChanged', JSON.stringify({
                    channel: channel,
                    oldState: oldState,
                    newState: newState,
                    elapseSinceLastState: elapseSinceLastState
                }));
            }
            event.emit('audioSubscribeStateChanged', channel, uid, oldState, newState, elapseSinceLastState);
        };
        agora.bridge.onVideoSubscribeStateChanged = function (channel, uid, oldState, newState, elapseSinceLastState) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onVideoSubscribeStateChanged', JSON.stringify({
                    channel: channel,
                    oldState: oldState,
                    newState: newState,
                    elapseSinceLastState: elapseSinceLastState
                }));
            }
            event.emit('videoSubscribeStateChanged', channel, uid, oldState, newState, elapseSinceLastState);
        };
        agora.bridge.onAudioVolumeIndication = function (speakers, speakerNumber, totalVolume) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioVolumeIndication', JSON.stringify({
                    speakers: speakers,
                    speakerNumber: speakerNumber,
                    totalVolume: totalVolume
                }));
            }
            event.emit('audio-volume-indication', speakers, speakerNumber, totalVolume);
            event.emit('audioVolumeIndication', speakers, speakerNumber, totalVolume);
        };
        agora.bridge.onActiveSpeaker = function (uid) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onActiveSpeaker', JSON.stringify({ uid: uid }));
            }
            event.emit('activeSpeaker', uid);
        };
        agora.bridge.onVideoStopped = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onVideoStopped', JSON.stringify({}));
            }
            event.emit('videoStopped');
        };
        agora.bridge.onFirstLocalVideoFrame = function (width, height, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstLocalVideoFrame', JSON.stringify({ width: width, height: height, elapsed: elapsed }));
            }
            event.emit('firstLocalVideoFrame', width, height, elapsed);
        };
        agora.bridge.onFirstLocalVideoFramePublished = function (elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstLocalVideoFramePublished', JSON.stringify({ elapsed: elapsed }));
            }
            event.emit('firstLocalVideoFramePublished', elapsed);
        };
        agora.bridge.onFirstRemoteVideoDecoded = function (uid, width, height, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstRemoteVideoDecoded', JSON.stringify({ uid: uid, width: width, height: height, elapsed: elapsed }));
            }
            event.emit('firstRemoteVideoDecoded', uid, width, height, elapsed);
        };
        agora.bridge.onFirstRemoteVideoFrame = function (uid, width, height, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstRemoteVideoFrame', JSON.stringify({ uid: uid, width: width, height: height, elapsed: elapsed }));
            }
            event.emit('firstRemoteVideoFrame', uid, width, height, elapsed);
        };
        agora.bridge.onUserMuteAudio = function (uid, muted) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onUserMuteAudio', JSON.stringify({ uid: uid, muted: muted }));
            }
            event.emit('user-mute-audio', uid, muted);
            event.emit('userMuteAudio', uid, muted);
        };
        agora.bridge.onUserMuteVideo = function (uid, muted) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onUserMuteVideo', JSON.stringify({ uid: uid, muted: muted }));
            }
            event.emit('userMuteVideo', uid, muted);
        };
        agora.bridge.onUserEnableVideo = function (uid, enabled) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onUserEnableVideo', JSON.stringify({ uid: uid, enabled: enabled }));
            }
            event.emit('userEnableVideo', uid, enabled);
        };
        agora.bridge.onAudioDeviceStateChanged = function (deviceId, deviceType, deviceState) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioDeviceStateChanged', JSON.stringify({
                    deviceId: deviceId,
                    deviceType: deviceType,
                    deviceState: deviceState
                }));
            }
            event.emit('audioDeviceStateChanged', deviceId, deviceType, deviceState);
        };
        agora.bridge.onAudioDeviceVolumeChanged = function (deviceType, volume, muted) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioDeviceVolumeChanged', JSON.stringify({ deviceType: deviceType, volume: volume, muted: muted }));
            }
            event.emit('audioDeviceVolumeChanged', deviceType, volume, muted);
        };
        agora.bridge.onCameraReady = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onCameraReady', JSON.stringify({}));
            }
            event.emit('cameraReady');
        };
        agora.bridge.onCameraFocusAreaChanged = function (x, y, width, height) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onCameraFocusAreaChanged', JSON.stringify({ x: x, y: y, width: width, height: height }));
            }
            event.emit('cameraFocusAreaChanged', x, y, width, height);
        };
        agora.bridge.onFacePositionChanged = function (imageWidth, imageHeight, vecRectangle, vecDistance, numFaces) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFacePositionChanged', JSON.stringify({
                    imageWidth: imageWidth,
                    imageHeight: imageHeight,
                    vecRectangle: vecRectangle,
                    vecDistance: vecDistance,
                    numFaces: numFaces
                }));
            }
            event.emit('facePositionChanged', imageWidth, imageHeight, vecRectangle, vecDistance, numFaces);
        };
        agora.bridge.onCameraExposureAreaChanged = function (x, y, width, height) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onCameraExposureAreaChanged', JSON.stringify({ x: x, y: y, width: width, height: height }));
            }
            event.emit('cameraExposureAreaChanged', x, y, width, height);
        };
        agora.bridge.onAudioMixingFinished = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioMixingFinished', JSON.stringify({}));
            }
            event.emit('audioMixingFinished');
        };
        agora.bridge.onAudioMixingStateChanged = function (state, reason) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioMixingStateChanged', JSON.stringify({ state: state, reason: reason }));
            }
            event.emit('audioMixingStateChanged', state, reason);
        };
        agora.bridge.onRemoteAudioMixingBegin = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteAudioMixingBegin', JSON.stringify({}));
            }
            event.emit('remoteAudioMixingBegin');
        };
        agora.bridge.onRemoteAudioMixingEnd = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteAudioMixingEnd', JSON.stringify({}));
            }
            event.emit('remoteAudioMixingEnd');
        };
        agora.bridge.onAudioEffectFinished = function (soundId) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioEffectFinished', JSON.stringify({ soundId: soundId }));
            }
            event.emit('audioEffectFinished', soundId);
        };
        agora.bridge.onFirstRemoteAudioDecoded = function (uid, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstRemoteAudioDecoded', JSON.stringify({ uid: uid, elapsed: elapsed }));
            }
            event.emit('firstRemoteAudioDecoded', uid, elapsed);
        };
        agora.bridge.onVideoDeviceStateChanged = function (deviceId, deviceType, deviceState) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onVideoDeviceStateChanged', JSON.stringify({
                    deviceId: deviceId,
                    deviceType: deviceType,
                    deviceState: deviceState
                }));
            }
            event.emit('videoDeviceStateChanged', deviceId, deviceType, deviceState);
        };
        agora.bridge.onLocalVideoStateChanged = function (localVideoState, error) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLocalVideoStateChanged', JSON.stringify({ localVideoState: localVideoState, error: error }));
            }
            event.emit('localVideoStateChanged', localVideoState, error);
        };
        agora.bridge.onVideoSizeChanged = function (uid, width, height, rotation) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onVideoSizeChanged', JSON.stringify({ uid: uid, width: width, height: height, rotation: rotation }));
            }
            event.emit('videoSizeChanged', uid, width, height, rotation);
        };
        agora.bridge.onRemoteVideoStateChanged = function (uid, state, reason, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteVideoStateChanged', JSON.stringify({ uid: uid, state: state, reason: reason, elapsed: elapsed }));
            }
            event.emit('remoteVideoStateChanged', uid, state, reason, elapsed);
        };
        agora.bridge.onUserEnableLocalVideo = function (uid, enabled) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onUserEnableLocalVideo', JSON.stringify({ uid: uid, enabled: enabled }));
            }
            event.emit('userEnableLocalVideo', uid, enabled);
        };
        agora.bridge.onStreamMessage = function (uid, streamId, data, length) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onStreamMessage', JSON.stringify({
                    uid: uid,
                    streamId: streamId,
                    data: String.fromCharCode.apply(null, data),
                    length: length
                }));
            }
            event.emit('streamMessage', uid, streamId, data, length);
        };
        agora.bridge.onStreamMessageError = function (uid, streamId, code, missed, cached) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onStreamMessageError', JSON.stringify({ uid: uid, streamId: streamId, code: code, missed: missed, cached: cached }));
            }
            event.emit('streamMessageError', uid, streamId, code, missed, cached);
        };
        agora.bridge.onMediaEngineLoadSuccess = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onMediaEngineLoadSuccess', JSON.stringify({}));
            }
            event.emit('mediaEngineLoadSuccess');
        };
        agora.bridge.onMediaEngineStartCallSuccess = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onMediaEngineStartCallSuccess', JSON.stringify({}));
            }
            event.emit('mediaEngineStartCallSuccess');
        };
        agora.bridge.onChannelMediaRelayStateChanged = function (state, code) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onChannelMediaRelayStateChanged', JSON.stringify({ state: state, code: code }));
            }
            event.emit('channelMediaRelayStateChanged', state, code);
        };
        agora.bridge.onChannelMediaRelayEvent = function (code) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onChannelMediaRelayEvent', JSON.stringify({ code: code }));
            }
            event.emit('channelMediaRelayEvent', code);
        };
        agora.bridge.onFirstLocalAudioFrame = function (elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstLocalAudioFrame', JSON.stringify({ elapsed: elapsed }));
            }
            event.emit('firstLocalAudioFrame', elapsed);
        };
        agora.bridge.onFirstLocalAudioFramePublished = function (elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstLocalAudioFramePublished', JSON.stringify({ elapsed: elapsed }));
            }
            event.emit('firstLocalAudioFramePublished', elapsed);
        };
        agora.bridge.onFirstRemoteAudioFrame = function (uid, elapsed) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onFirstRemoteAudioFrame', JSON.stringify({ uid: uid, elapsed: elapsed }));
            }
            event.emit('firstRemoteAudioFrame', uid, elapsed);
        };
        agora.bridge.onRtmpStreamingStateChanged = function (url, state, errCode) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRtmpStreamingStateChanged', JSON.stringify({ url: url, state: state, errCode: errCode }));
            }
            event.emit('rtmpStreamingStateChanged', url, state, errCode);
        };
        agora.bridge.onRtmpStreamingEvent = function (url, eventCode) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRtmpStreamingEvent', JSON.stringify({ url: url, eventCode: eventCode }));
            }
            event.emit('rtmpStreamingEvent', url, eventCode);
        };
        agora.bridge.onStreamPublished = function (url, error) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onStreamPublished', JSON.stringify({ url: url, error: error }));
            }
            event.emit('streamPublished', url, error);
        };
        agora.bridge.onStreamUnpublished = function (url) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onStreamUnpublished', JSON.stringify({ url: url }));
            }
            event.emit('streamUnpublished', url);
        };
        agora.bridge.onTranscodingUpdated = function () {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onTranscodingUpdated', JSON.stringify({}));
            }
            event.emit('transcodingUpdated');
        };
        agora.bridge.onStreamInjectedStatus = function (url, uid, status) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onStreamInjectedStatus', JSON.stringify({ url: url, uid: uid, status: status }));
            }
            event.emit('streamInjectedStatus', url, uid, status);
        };
        agora.bridge.onAudioRouteChanged = function (routing) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onAudioRouteChanged', JSON.stringify({ routing: routing }));
            }
            event.emit('audio-routing-changed', routing);
            event.emit('audioRouteChanged', routing);
        };
        agora.bridge.onLocalPublishFallbackToAudioOnly = function (isFallbackOrRecover) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLocalPublishFallbackToAudioOnly', JSON.stringify({ isFallbackOrRecover: isFallbackOrRecover }));
            }
            event.emit('localPublishFallbackToAudioOnly', isFallbackOrRecover);
        };
        agora.bridge.onRemoteSubscribeFallbackToAudioOnly = function (uid, isFallbackOrRecover) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteSubscribeFallbackToAudioOnly', JSON.stringify({
                    uid: uid,
                    isFallbackOrRecover: isFallbackOrRecover
                }));
            }
            event.emit('remoteSubscribeFallbackToAudioOnly', uid, isFallbackOrRecover);
        };
        agora.bridge.onRemoteAudioTransportStats = function (uid, delay, lost, rxKBitRate) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteAudioTransportStats', JSON.stringify({ uid: uid, delay: delay, lost: lost, rxKBitRate: rxKBitRate }));
            }
            event.emit('remoteAudioTransportStats', uid, delay, lost, rxKBitRate);
        };
        agora.bridge.onRemoteVideoTransportStats = function (uid, delay, lost, rxKBitRate) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onRemoteVideoTransportStats', JSON.stringify({ uid: uid, delay: delay, lost: lost, rxKBitRate: rxKBitRate }));
            }
            event.emit('remoteVideoTransportStats', uid, delay, lost, rxKBitRate);
        };
        agora.bridge.onMicrophoneEnabled = function (enabled) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onMicrophoneEnabled', JSON.stringify({ enabled: enabled }));
            }
            event.emit('microphoneEnabled', enabled);
        };
        agora.bridge.onConnectionStateChanged = function (state, reason) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onConnectionStateChanged', JSON.stringify({ state: state, reason: reason }));
            }
            event.emit('connectionStateChanged', state, reason);
        };
        agora.bridge.onNetworkTypeChanged = function (type) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onNetworkTypeChanged', JSON.stringify({ type: type }));
            }
            event.emit('networkTypeChanged', type);
        };
        agora.bridge.onLocalUserRegistered = function (uid, userAccount) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onLocalUserRegistered', JSON.stringify({ uid: uid, userAccount: userAccount }));
            }
            event.emit('localUserRegistered', uid, userAccount);
        };
        agora.bridge.onUserInfoUpdated = function (uid, info) {
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onUserInfoUpdated', JSON.stringify({ uid: uid, info: info }));
            }
            event.emit('userInfoUpdated', uid, info);
        };
        agora.bridge.onMetadataReceived = function (_a) {
            var uid = _a.uid, size = _a.size, buffer = _a.buffer, timeStampMs = _a.timeStampMs;
            if (agora.bridge.logEngineEventCase) {
                agora.bridge.logEngineEventCase('onMetadataReceived', JSON.stringify({
                    uid: uid,
                    size: size,
                    buffer: String.fromCharCode.apply(null, buffer),
                    timeStampMs: timeStampMs
                }));
            }
            event.emit('metadataReceived', { uid: uid, size: size, buffer: buffer, timeStampMs: timeStampMs });
        };
    }
    function initWebEvent() {
        client.on('first-audio-frame-decode', function (evt) {
            event.emit('firstRemoteAudioDecoded', evt.stream.getId(), 0);
        });
        client.on('first-video-frame-decode', function (evt) {
            evt.stream.getStats(function (stats) {
                event.emit('firstRemoteVideoDecoded', evt.stream.getId(), stats.videoReceiveResolutionWidth, stats.videoReceiveResolutionHeight, 0);
            });
        });
        client.on('stream-published', function (_) {
            event.emit('firstLocalAudioFramePublished', 0);
            event.emit('firstLocalVideoFramePublished', 0);
        });
        client.on('stream-unpublished', function (_) {
            event.emit('localAudioStateChanged', agora.LOCAL_AUDIO_STREAM_STATE.LOCAL_AUDIO_STREAM_STATE_STOPPED, agora.LOCAL_AUDIO_STREAM_ERROR.LOCAL_AUDIO_STREAM_ERROR_OK);
            event.emit('localVideoStateChanged', agora.LOCAL_VIDEO_STREAM_STATE.LOCAL_VIDEO_STREAM_STATE_STOPPED, agora.LOCAL_VIDEO_STREAM_ERROR.LOCAL_VIDEO_STREAM_ERROR_OK);
        });
        client.on('stream-added', function (evt) {
            client.subscribe(evt.stream);
            remoteStreams.set(evt.stream.getId(), evt.stream);
            event.emit('remoteAudioStateChanged', evt.stream.getId(), agora.REMOTE_AUDIO_STATE.REMOTE_AUDIO_STATE_STARTING, agora.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_INTERNAL, 0);
            event.emit('remoteVideoStateChanged', evt.stream.getId(), agora.REMOTE_VIDEO_STATE.REMOTE_VIDEO_STATE_STARTING, agora.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_INTERNAL, 0);
        });
        client.on('stream-removed', function (evt) {
            client.unsubscribe(evt.stream);
            remoteStreams.delete(evt.stream.getId());
            event.emit('remoteAudioStateChanged', evt.stream.getId(), agora.REMOTE_AUDIO_STATE.REMOTE_AUDIO_STATE_STOPPED, agora.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_INTERNAL, 0);
            event.emit('remoteVideoStateChanged', evt.stream.getId(), agora.REMOTE_VIDEO_STATE.REMOTE_VIDEO_STATE_STOPPED, agora.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_INTERNAL, 0);
        });
        client.on('stream-subscribed', function (evt) {
            evt.stream.play('Cocos2dGameContainer');
            event.emit('audioSubscribeStateChanged', undefined, evt.stream.getId(), agora.STREAM_SUBSCRIBE_STATE.SUB_STATE_IDLE, agora.STREAM_SUBSCRIBE_STATE.SUB_STATE_SUBSCRIBED, 0);
            event.emit('videoSubscribeStateChanged', undefined, evt.stream.getId(), agora.STREAM_SUBSCRIBE_STATE.SUB_STATE_IDLE, agora.STREAM_SUBSCRIBE_STATE.SUB_STATE_SUBSCRIBED, 0);
        });
        client.on('peer-online', function (evt) {
            event.emit('user-joined', evt.uid, 0);
            event.emit('userJoined', evt.uid, 0);
        });
        client.on('peer-leave', function (evt) {
            event.emit('user-offline', evt.uid, evt.reason, 0);
            event.emit('userOffline', evt.uid, evt.reason, 0);
        });
        client.on('mute-audio', function (evt) {
            event.emit('user-mute-audio', evt.uid, true);
            event.emit('userMuteAudio', evt.uid, true);
        });
        client.on('unmute-audio', function (evt) {
            event.emit('user-mute-audio', evt.uid, false);
            event.emit('userMuteAudio', evt.uid, false);
        });
        client.on('mute-video', function (evt) {
            event.emit('userMuteVideo', evt.uid, true);
        });
        client.on('unmute-video', function (evt) {
            event.emit('userMuteVideo', evt.uid, false);
        });
        client.on('crypt-error', function (_) {
        });
        client.on('client-banned', function (_) {
            event.emit('connection-banned');
            event.emit('connectionBanned');
        });
        client.on('active-speaker', function (evt) {
            event.emit('activeSpeaker', evt.uid);
        });
        client.on('volume-indicator', function (evt) {
            var speakers = [];
            var sumVolume = 0;
            evt.attr.forEach(function (_a, _) {
                var uid = _a.uid, level = _a.level;
                speakers.push({ uid: uid, volume: level });
                sumVolume += level;
            });
            event.emit('audio-volume-indication', speakers, speakers.length, sumVolume / speakers.length);
            event.emit('audioVolumeIndication', speakers, speakers.length, sumVolume / speakers.length);
        });
        client.on('liveStreamingStarted', function (evt) {
            event.emit('rtmpStreamingStateChanged', evt.url, agora.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_RUNNING, null);
        });
        client.on('liveStreamingFailed', function (evt) {
            event.emit('rtmpStreamingStateChanged', evt.url, agora.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_FAILURE, null);
        });
        client.on('liveStreamingStopped', function (evt) {
            event.emit('rtmpStreamingStateChanged', evt.url, agora.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_IDLE, null);
        });
        client.on('liveTranscodingUpdated', function (_) {
            event.emit('transcodingUpdated');
        });
        client.on('streamInjectedStatus', function (evt) {
            event.emit('streamInjectedStatus', evt.url, evt.uid, evt.status);
        });
        client.on('onTokenPrivilegeWillExpire', function (_) {
            event.emit('tokenPrivilegeWillExpire');
        });
        client.on('onTokenPrivilegeDidExpire', function (_) {
        });
        client.on('error', function (evt) {
            event.emit('error', agora.ERROR_CODE_TYPE.ERR_FAILED, evt.reason);
        });
        client.on('network-type-changed', function (evt) {
            event.emit('networkTypeChanged', evt.networkType);
        });
        client.on('recording-device-changed', function (evt) {
            event.emit('recordingDeviceChanged', evt.state, evt.device);
        });
        client.on('playout-device-changed', function (evt) {
            event.emit('playoutDeviceChanged', evt.state, evt.device);
        });
        client.on('camera-changed', function (_) {
        });
        client.on('stream-type-changed', function (_) {
        });
        client.on('connection-state-change', function (evt) {
            var state = {
                'DISCONNECTED': agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED,
                'CONNECTING': agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTING,
                'CONNECTED': agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED,
                'DISCONNECTING': undefined,
            };
            if (state[evt.curState] !== undefined) {
                event.emit('connectionStateChanged', state[evt.curState], null);
            }
        });
        client.on('stream-reconnect-start', function (_) {
        });
        client.on('stream-reconnect-end', function (_) {
        });
        client.on('client-role-changed', function (evt) {
            event.emit('client-role-changed', null, evt.role);
            event.emit('clientRoleChanged', null, evt.role);
        });
        client.on('reconnect', function () {
            event.emit('connectionStateChanged', agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_RECONNECTING, null);
        });
        client.on('connected', function () {
            event.emit('connectionStateChanged', agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED, null);
        });
        client.on('network-quality', function (stats) {
            event.emit('networkQuality', 0, stats.uplinkNetworkQuality, stats.downlinkNetworkQuality);
        });
        client.on('stream-fallback', function (evt) {
            event.emit('remoteSubscribeFallbackToAudioOnly', evt.uid, evt.attr === 1);
        });
        client.on('stream-updated', function (_) {
        });
        client.on('exception', function (evt) {
            event.emit('warning', evt.code, evt.msg);
        });
        client.on('enable-local-video', function (evt) {
            event.emit('userEnableVideo', evt.uid, true);
        });
        client.on('disable-local-video', function (evt) {
            event.emit('userEnableVideo', evt.uid, false);
        });
        client.on('channel-media-relay-event', function (evt) {
            event.emit('channelMediaRelayEvent', evt.code);
        });
        client.on('channel-media-relay-state', function (evt) {
            event.emit('channelMediaRelayStateChanged', evt.state, evt.code);
        });
    }
    function callNativeMethod(apiType, param, extra) {
        if (param === void 0) { param = {}; }
        return agora.bridge.callNativeMethod(apiType, JSON.stringify(param), extra);
    }
    function callNativeMethodAudioEffect(apiType, param) {
        if (param === void 0) { param = {}; }
        return agora.bridge.callNativeMethodAudioEffect(apiType, JSON.stringify(param));
    }
    function init(appId) {
        return initWithAreaCode(appId, agora.AREA_CODE.AREA_CODE_GLOBAL);
    }
    agora.init = init;
    function initWithAreaCode(appId, areaCode) {
        var _a;
        if (isWeb) {
            var areas = (_a = {},
                _a[agora.AREA_CODE.AREA_CODE_CN] = AgoraRTC.AREAS.CHINA,
                _a[agora.AREA_CODE.AREA_CODE_NA] = AgoraRTC.AREAS.NORTH_AMERICA,
                _a[agora.AREA_CODE.AREA_CODE_EUR] = AgoraRTC.AREAS.EUROPE,
                _a[agora.AREA_CODE.AREA_CODE_AS] = AgoraRTC.AREAS.ASIA,
                _a[agora.AREA_CODE.AREA_CODE_JAPAN] = AgoraRTC.AREAS.JAPAN,
                _a[agora.AREA_CODE.AREA_CODE_INDIA] = AgoraRTC.AREAS.INDIA,
                _a[agora.AREA_CODE.AREA_CODE_GLOBAL] = AgoraRTC.AREAS.GLOBAL,
                _a);
            var config = {
                codec: 'h264',
                mode: 'live',
                areaCode: [areas[areaCode]]
            };
            client = AgoraRTC.createClient(config);
            initWebEvent();
            client.init(appId);
            return 0;
        }
        else {
            initNativeEvent();
            return callNativeMethod(agora.API_TYPE.INITIALIZE, { appId: appId, areaCode: areaCode });
        }
    }
    agora.initWithAreaCode = initWithAreaCode;
    function release() {
        callNativeMethod(agora.API_TYPE.RELEASE);
    }
    agora.release = release;
    function on(type, callback, target, useCapture) {
        return event.on(type, callback, target, useCapture);
    }
    agora.on = on;
    function off(type, callback, target) {
        event.off(type, callback, target);
    }
    agora.off = off;
    function setChannelProfile(profile) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_CHANNEL_PROFILE, { profile: profile });
    }
    agora.setChannelProfile = setChannelProfile;
    function setClientRole(role) {
        if (isWeb) {
            var roles = new Map([
                [agora.CLIENT_ROLE_TYPE.CLIENT_ROLE_AUDIENCE, 'audience'],
                [agora.CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER, 'host'],
            ]);
            client.setClientRole(roles.get(role));
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.SET_CLIENT_ROLE, { role: role });
    }
    agora.setClientRole = setClientRole;
    function joinChannel(token, channelId, info, uid) {
        if (info === void 0) { info = ''; }
        if (uid === void 0) { uid = 0; }
        if (isWeb) {
            client.join(token, channelId, uid, function (uid) {
                var spec = { streamID: uid, audio: true, video: true, screen: false };
                localStream = AgoraRTC.createStream(spec);
                localStream.init(function () {
                    localStream.play('Cocos2dGameContainer');
                    client.publish(localStream);
                });
                event.emit('join-channel-success', channelId, uid, 0);
                event.emit('joinChannelSuccess', channelId, uid, 0);
            });
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.JOIN_CHANNEL, { token: token, channelId: channelId, info: info, uid: uid });
    }
    agora.joinChannel = joinChannel;
    function switchChannel(token, channelId) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SWITCH_CHANNEL, { token: token, channelId: channelId });
    }
    agora.switchChannel = switchChannel;
    function leaveChannel() {
        if (isWeb) {
            client.leave(function () {
                event.emit('leave-channel', null);
                event.emit('leaveChannel', null);
            });
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.LEAVE_CHANNEL);
    }
    agora.leaveChannel = leaveChannel;
    function renewToken(token) {
        if (isWeb) {
            client.renewToken(token);
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.RE_NEW_TOKEN, { token: token });
    }
    agora.renewToken = renewToken;
    function registerLocalUserAccount(appId, userAccount) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.REGISTER_LOCAL_USER_ACCOUNT, { appId: appId, userAccount: userAccount });
    }
    agora.registerLocalUserAccount = registerLocalUserAccount;
    function joinChannelWithUserAccount(token, channelId, userAccount) {
        if (isWeb) {
            client.join(token, channelId, userAccount, function (uid) {
                var spec = { streamID: uid, audio: true, video: true, screen: false };
                localStream = AgoraRTC.createStream(spec);
                localStream.init(function () {
                    localStream.play('Cocos2dGameContainer');
                    client.publish(localStream);
                });
                event.emit('join-channel-success', channelId, uid, 0);
                event.emit('joinChannelSuccess', channelId, uid, 0);
            });
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.JOIN_CHANNEL_WITH_USER_ACCOUNT, { token: token, channelId: channelId, userAccount: userAccount });
    }
    agora.joinChannelWithUserAccount = joinChannelWithUserAccount;
    function getUserInfoByUserAccount(userAccount) {
        if (isWeb) {
            return null;
        }
        return callNativeMethod(agora.API_TYPE.GET_USER_INFO_BY_USER_ACCOUNT, { userAccount: userAccount });
    }
    agora.getUserInfoByUserAccount = getUserInfoByUserAccount;
    function getUserInfoByUid(uid) {
        if (isWeb) {
            return null;
        }
        return callNativeMethod(agora.API_TYPE.GET_USER_INFO_BY_UID, { uid: uid });
    }
    agora.getUserInfoByUid = getUserInfoByUid;
    function startEchoTest(intervalInSeconds) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        if (intervalInSeconds === undefined) {
            return callNativeMethod(agora.API_TYPE.START_ECHO_TEST);
        }
        return callNativeMethod(agora.API_TYPE.START_ECHO_TEST_2, { intervalInSeconds: intervalInSeconds });
    }
    agora.startEchoTest = startEchoTest;
    function stopEchoTest() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.STOP_ECHO_TEST);
    }
    agora.stopEchoTest = stopEchoTest;
    function enableVideo() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_VIDEO);
    }
    agora.enableVideo = enableVideo;
    function disableVideo() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.DISABLE_VIDEO);
    }
    agora.disableVideo = disableVideo;
    function setVideoProfile(profile, swapWidthAndHeight) {
        var _a;
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                var profiles = (_a = {},
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_120P] = '120p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_120P_3] = '120p_3',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_180P] = '180p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_180P_3] = '180p_3',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_180P_4] = '180p_4',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_240P] = '240p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_240P_3] = '240p_3',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_240P_4] = '240p_4',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P] = '360p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_3] = '360p_3',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_4] = '360p_4',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_6] = '360p_6',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_7] = '360p_7',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_8] = '360p_8',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_9] = '360p_9',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_10] = '360p_10',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_11] = '360p_11',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P] = '480p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_3] = '480p_3',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_4] = '480p_4',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_6] = '480p_6',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_8] = '480p_8',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_9] = '480p_9',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_10] = '480p_10',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P] = '720p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P_3] = '720p_3',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P_5] = '720p_5',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P_6] = '720p_6',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1080P] = '1080p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1080P_3] = '1080p_3',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1080P_5] = '1080p_5',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1440P] = '1440p_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1440P_2] = '1440p_2',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_4K] = '4K_1',
                    _a[agora.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_4K_3] = '4K_3',
                    _a);
                if (profiles[profile] === undefined) {
                    return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
                }
                else {
                    localStream.setVideoProfile(profiles[profile]);
                    return agora.ERROR_CODE_TYPE.ERR_OK;
                }
            }
        }
        return callNativeMethod(agora.API_TYPE.SET_VIDEO_PROFILE, { profile: profile, swapWidthAndHeight: swapWidthAndHeight });
    }
    agora.setVideoProfile = setVideoProfile;
    function setVideoEncoderConfiguration(config) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                var configuration = {
                    resolution: { width: config.dimensions.width, height: config.dimensions.height },
                    frameRate: { max: config.frameRate, min: config.minFrameRate },
                    bitrate: { max: config.bitrate, min: config.minBitrate }
                };
                localStream.setVideoEncoderConfiguration(configuration);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.SET_VIDEO_ENCODER_CONFIGURATION, { config: config });
    }
    agora.setVideoEncoderConfiguration = setVideoEncoderConfiguration;
    function setCameraCapturerConfiguration(config) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_CAMERA_CAPTURER_CONFIGURATION, { config: config });
    }
    agora.setCameraCapturerConfiguration = setCameraCapturerConfiguration;
    function startPreview() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.START_PREVIEW);
    }
    agora.startPreview = startPreview;
    function setRemoteUserPriority(uid, userPriority) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_REMOTE_USER_PRIORITY, { uid: uid, userPriority: userPriority });
    }
    agora.setRemoteUserPriority = setRemoteUserPriority;
    function stopPreview() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.STOP_PREVIEW);
    }
    agora.stopPreview = stopPreview;
    function enableAudio() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_AUDIO);
    }
    agora.enableAudio = enableAudio;
    function enableLocalAudio(enabled) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                if (enabled) {
                    localStream.enableAudio();
                }
                else {
                    localStream.disableAudio();
                }
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_LOCAL_AUDIO, { enabled: enabled });
    }
    agora.enableLocalAudio = enableLocalAudio;
    function disableAudio() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.DISABLE_AUDIO);
    }
    agora.disableAudio = disableAudio;
    function setAudioProfile(profile, scenario) {
        var _a;
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                var profiles = (_a = {},
                    _a[agora.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_SPEECH_STANDARD] = 'speech_standard',
                    _a[agora.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_STANDARD] = 'music_standard',
                    _a[agora.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_STANDARD_STEREO] = 'standard_stereo',
                    _a[agora.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY] = 'high_quality',
                    _a[agora.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO] = 'high_quality_stereo',
                    _a);
                if (profiles[profile] === undefined) {
                    return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
                }
                else {
                    localStream.setAudioProfile(profiles[profile]);
                    return agora.ERROR_CODE_TYPE.ERR_OK;
                }
            }
        }
        return callNativeMethod(agora.API_TYPE.SET_AUDIO_PROFILE, { profile: profile, scenario: scenario });
    }
    agora.setAudioProfile = setAudioProfile;
    function muteLocalAudioStream(mute) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                if (mute) {
                    localStream.muteAudio();
                }
                else {
                    localStream.unmuteAudio();
                }
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.MUTE_LOCAL_AUDIO_STREAM, { mute: mute });
    }
    agora.muteLocalAudioStream = muteLocalAudioStream;
    function muteAllRemoteAudioStreams(mute) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.MUTE_ALL_REMOTE_AUDIO_STREAMS, { mute: mute });
    }
    agora.muteAllRemoteAudioStreams = muteAllRemoteAudioStreams;
    function setDefaultMuteAllRemoteAudioStreams(mute) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_DEFAULT_MUTE_ALL_REMOTE_AUDIO_STREAMS, { mute: mute });
    }
    agora.setDefaultMuteAllRemoteAudioStreams = setDefaultMuteAllRemoteAudioStreams;
    function adjustUserPlaybackSignalVolume(uid, volume) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ADJUST_USER_PLAYBACK_SIGNAL_VOLUME, { uid: uid, volume: volume });
    }
    agora.adjustUserPlaybackSignalVolume = adjustUserPlaybackSignalVolume;
    function muteRemoteAudioStream(userId, mute) {
        if (isWeb) {
            var stream = remoteStreams.get(userId);
            if (stream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                if (mute) {
                    stream.muteAudio();
                }
                else {
                    stream.unmuteAudio();
                }
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.MUTE_REMOTE_AUDIO_STREAM, { userId: userId, mute: mute });
    }
    agora.muteRemoteAudioStream = muteRemoteAudioStream;
    function muteLocalVideoStream(mute) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                if (mute) {
                    localStream.muteVideo();
                }
                else {
                    localStream.unmuteVideo();
                }
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.MUTE_LOCAL_VIDEO_STREAM, { mute: mute });
    }
    agora.muteLocalVideoStream = muteLocalVideoStream;
    function enableLocalVideo(enabled) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                if (enabled) {
                    localStream.enableVideo();
                }
                else {
                    localStream.disableVideo();
                }
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_LOCAL_VIDEO, { enabled: enabled });
    }
    agora.enableLocalVideo = enableLocalVideo;
    function muteAllRemoteVideoStreams(mute) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.MUTE_ALL_REMOTE_VIDEO_STREAMS, { mute: mute });
    }
    agora.muteAllRemoteVideoStreams = muteAllRemoteVideoStreams;
    function setDefaultMuteAllRemoteVideoStreams(mute) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_DEFAULT_MUTE_ALL_REMOTE_VIDEO_STREAMS, { mute: mute });
    }
    agora.setDefaultMuteAllRemoteVideoStreams = setDefaultMuteAllRemoteVideoStreams;
    function muteRemoteVideoStream(userId, mute) {
        if (isWeb) {
            var stream = remoteStreams.get(userId);
            if (stream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                if (mute) {
                    stream.muteVideo();
                }
                else {
                    stream.unmuteVideo();
                }
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.MUTE_REMOTE_VIDEO_STREAM, { userId: userId, mute: mute });
    }
    agora.muteRemoteVideoStream = muteRemoteVideoStream;
    function setRemoteVideoStreamType(userId, streamType) {
        if (isWeb) {
            var stream = remoteStreams.get(userId);
            if (stream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                client.setRemoteVideoStreamType(stream, streamType);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.SET_REMOTE_VIDEO_STREAM_TYPE, { userId: userId, streamType: streamType });
    }
    agora.setRemoteVideoStreamType = setRemoteVideoStreamType;
    function setRemoteDefaultVideoStreamType(streamType) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_REMOTE_DEFAULT_VIDEO_STREAM_TYPE, { streamType: streamType });
    }
    agora.setRemoteDefaultVideoStreamType = setRemoteDefaultVideoStreamType;
    function enableAudioVolumeIndication(interval, smooth, report_vad) {
        if (isWeb) {
            client.enableAudioVolumeIndicator();
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_AUDIO_VOLUME_INDICATION, { interval: interval, smooth: smooth, report_vad: report_vad });
    }
    agora.enableAudioVolumeIndication = enableAudioVolumeIndication;
    function startAudioRecording(filePath, quality, sampleRate) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        if (sampleRate === undefined) {
            return callNativeMethod(agora.API_TYPE.START_AUDIO_RECORDING, { filePath: filePath, quality: quality });
        }
        return callNativeMethod(agora.API_TYPE.START_AUDIO_RECORDING2, { filePath: filePath, sampleRate: sampleRate, quality: quality });
    }
    agora.startAudioRecording = startAudioRecording;
    function stopAudioRecording() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.STOP_AUDIO_RECORDING);
    }
    agora.stopAudioRecording = stopAudioRecording;
    function startAudioMixing(filePath, loopback, replace, cycle) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.startAudioMixing({ filePath: filePath, cycle: cycle, loop: loopback, playTime: 0, replace: replace });
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.START_AUDIO_MIXING, {
            filePath: filePath,
            loopback: loopback,
            replace: replace,
            cycle: cycle
        });
    }
    agora.startAudioMixing = startAudioMixing;
    function stopAudioMixing() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.stopAudioMixing();
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.STOP_AUDIO_MIXING);
    }
    agora.stopAudioMixing = stopAudioMixing;
    function pauseAudioMixing() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.pauseAudioMixing();
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.PAUSE_AUDIO_MIXING);
    }
    agora.pauseAudioMixing = pauseAudioMixing;
    function resumeAudioMixing() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.resumeAudioMixing();
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.RESUME_AUDIO_MIXING);
    }
    agora.resumeAudioMixing = resumeAudioMixing;
    function setHighQualityAudioParameters(fullband, stereo, fullBitrate) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_HIGH_QUALITY_AUDIO_PARAMETERS, {
            fullband: fullband,
            stereo: stereo,
            fullBitrate: fullBitrate
        });
    }
    agora.setHighQualityAudioParameters = setHighQualityAudioParameters;
    function adjustAudioMixingVolume(volume) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.adjustAudioMixingVolume(volume);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.ADJUST_AUDIO_MIXING_VOLUME, { volume: volume });
    }
    agora.adjustAudioMixingVolume = adjustAudioMixingVolume;
    function adjustAudioMixingPlayoutVolume(volume) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.ADJUST_AUDIO_MIXING_PLAYOUT_VOLUME, { volume: volume });
    }
    agora.adjustAudioMixingPlayoutVolume = adjustAudioMixingPlayoutVolume;
    function getAudioMixingPlayoutVolume() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.GET_AUDIO_MIXING_PLAYOUT_VOLUME);
    }
    agora.getAudioMixingPlayoutVolume = getAudioMixingPlayoutVolume;
    function adjustAudioMixingPublishVolume(volume) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.ADJUST_AUDIO_MIXING_PUBLISH_VOLUME, { volume: volume });
    }
    agora.adjustAudioMixingPublishVolume = adjustAudioMixingPublishVolume;
    function getAudioMixingPublishVolume() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.GET_AUDIO_MIXING_PUBLISH_VOLUME);
    }
    agora.getAudioMixingPublishVolume = getAudioMixingPublishVolume;
    function getAudioMixingDuration() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                return localStream.getAudioMixingDuration();
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.GET_AUDIO_MIXING_DURATION);
    }
    agora.getAudioMixingDuration = getAudioMixingDuration;
    function getAudioMixingCurrentPosition() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                return localStream.getAudioMixingCurrentPosition();
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.GET_AUDIO_MIXING_CURRENT_POSITION);
    }
    agora.getAudioMixingCurrentPosition = getAudioMixingCurrentPosition;
    function setAudioMixingPosition(pos) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.setAudioMixingPosition(pos);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_AUDIO_MIXING_POSITION, { pos: pos });
    }
    agora.setAudioMixingPosition = setAudioMixingPosition;
    function setAudioMixingPitch(pitch) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_AUDIO_MIXING_PITCH, { pitch: pitch });
    }
    agora.setAudioMixingPitch = setAudioMixingPitch;
    function getEffectsVolume() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                return localStream.getEffectsVolume()[0].volume;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.GET_EFFECTS_VOLUME);
    }
    agora.getEffectsVolume = getEffectsVolume;
    function setEffectsVolume(volume) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.setEffectsVolume(volume);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_EFFECTS_VOLUME, { volume: volume });
    }
    agora.setEffectsVolume = setEffectsVolume;
    function setVolumeOfEffect(soundId, volume) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.setVolumeOfEffect(soundId, volume);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_VOLUME_OF_EFFECT, { soundId: soundId, volume: volume });
    }
    agora.setVolumeOfEffect = setVolumeOfEffect;
    function enableFaceDetection(enabled) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_FACE_DETECTION, { enabled: enabled });
    }
    agora.enableFaceDetection = enableFaceDetection;
    function playEffect(soundId, filePath, loopCount, pitch, pan, gain, publish) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.playEffect({ soundId: soundId, filePath: filePath, cycle: loopCount });
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.PLAY_EFFECT, {
            soundId: soundId,
            filePath: filePath,
            loopCount: loopCount,
            pitch: pitch,
            pan: pan,
            gain: gain,
            publish: publish
        });
    }
    agora.playEffect = playEffect;
    function stopEffect(soundId) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.stopEffect(soundId);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.STOP_EFFECT, { soundId: soundId });
    }
    agora.stopEffect = stopEffect;
    function stopAllEffects() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.stopAllEffects();
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.STOP_ALL_EFFECTS);
    }
    agora.stopAllEffects = stopAllEffects;
    function preloadEffect(soundId, filePath) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.playEffect({ filePath: filePath, soundId: soundId });
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.PRE_LOAD_EFFECT, { soundId: soundId, filePath: filePath });
    }
    agora.preloadEffect = preloadEffect;
    function unloadEffect(soundId) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.unloadEffect(soundId);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.UN_LOAD_EFFECT, { soundId: soundId });
    }
    agora.unloadEffect = unloadEffect;
    function pauseEffect(soundId) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.pauseEffect(soundId);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.PAUSE_EFFECT, { soundId: soundId });
    }
    agora.pauseEffect = pauseEffect;
    function pauseAllEffects() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.pauseAllEffects();
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.PAUSE_ALL_EFFECTS);
    }
    agora.pauseAllEffects = pauseAllEffects;
    function resumeEffect(soundId) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.resumeEffect(soundId);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.RESUME_EFFECT, { soundId: soundId });
    }
    agora.resumeEffect = resumeEffect;
    function resumeAllEffects() {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.resumeAllEffects();
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.RESUME_ALL_EFFECTS);
    }
    agora.resumeAllEffects = resumeAllEffects;
    function enableSoundPositionIndication(enabled) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.ENABLE_SOUND_POSITION_INDICATION, { enabled: enabled });
    }
    agora.enableSoundPositionIndication = enableSoundPositionIndication;
    function setRemoteVoicePosition(uid, pan, gain) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_REMOTE_VOICE_POSITIONN, { uid: uid, pan: pan, gain: gain });
    }
    agora.setRemoteVoicePosition = setRemoteVoicePosition;
    function setLocalVoicePitch(pitch) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_LOCAL_VOICE_CHANGER, { pitch: pitch });
    }
    agora.setLocalVoicePitch = setLocalVoicePitch;
    function setLocalVoiceEqualization(bandFrequency, bandGain) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_LOCAL_VOICE_EQUALIZATION, {
            bandFrequency: bandFrequency,
            bandGain: bandGain
        });
    }
    agora.setLocalVoiceEqualization = setLocalVoiceEqualization;
    function setLocalVoiceReverb(reverbKey, value) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_LOCAL_VOICE_REVERB, { reverbKey: reverbKey, value: value });
    }
    agora.setLocalVoiceReverb = setLocalVoiceReverb;
    function setLocalVoiceChanger(voiceChanger) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_LOCAL_VOICE_CHANGER, { voiceChanger: voiceChanger });
    }
    agora.setLocalVoiceChanger = setLocalVoiceChanger;
    function setLocalVoiceReverbPreset(reverbPreset) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_LOCAL_VOICE_REVERB_PRESET, { reverbPreset: reverbPreset });
    }
    agora.setLocalVoiceReverbPreset = setLocalVoiceReverbPreset;
    function setLogFile(filePath) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_LOG_FILE, { filePath: filePath });
    }
    agora.setLogFile = setLogFile;
    function setLogFilter(filter) {
        var _a;
        if (isWeb) {
            var levels = (_a = {},
                _a[agora.LOG_FILTER_TYPE.LOG_FILTER_DEBUG] = 0,
                _a[agora.LOG_FILTER_TYPE.LOG_FILTER_INFO] = 1,
                _a[agora.LOG_FILTER_TYPE.LOG_FILTER_WARN] = 2,
                _a[agora.LOG_FILTER_TYPE.LOG_FILTER_ERROR] = 3,
                _a[agora.LOG_FILTER_TYPE.LOG_FILTER_OFF] = 4,
                _a);
            if (levels[filter] === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
            }
            else {
                AgoraRTC.Logger.setLogLevel(levels[filter]);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.SET_LOG_FILTER, { filter: filter });
    }
    agora.setLogFilter = setLogFilter;
    function setLogFileSize(fileSizeInKBytes) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_LOG_FILE_SIZE, { fileSizeInKBytes: fileSizeInKBytes });
    }
    agora.setLogFileSize = setLogFileSize;
    function setLocalRenderMode(renderMode, mirrorMode) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        if (mirrorMode === undefined) {
            return callNativeMethod(agora.API_TYPE.SET_LOCAL_RENDER_MODE, { renderMode: renderMode });
        }
        return callNativeMethod(agora.API_TYPE.SET_LOCAL_RENDER_MODE_2, { renderMode: renderMode, mirrorMode: mirrorMode });
    }
    agora.setLocalRenderMode = setLocalRenderMode;
    function setRemoteRenderMode(userId, renderMode, mirrorMode) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        if (mirrorMode === undefined) {
            return callNativeMethod(agora.API_TYPE.SET_REMOTE_RENDER_MODE, { userId: userId, renderMode: renderMode });
        }
        return callNativeMethod(agora.API_TYPE.SET_REMOTE_RENDER_MODE_2, { userId: userId, renderMode: renderMode, mirrorMode: mirrorMode });
    }
    agora.setRemoteRenderMode = setRemoteRenderMode;
    function setLocalVideoMirrorMode(mirrorMode) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_LOCAL_VIDEO_MIRROR_MODE, { mirrorMode: mirrorMode });
    }
    agora.setLocalVideoMirrorMode = setLocalVideoMirrorMode;
    function enableDualStreamMode(enabled) {
        if (isWeb) {
            if (enabled) {
                client.enableDualStream();
            }
            else {
                client.disableDualStream();
            }
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_DUAL_STREAM_MODE, { enabled: enabled });
    }
    agora.enableDualStreamMode = enableDualStreamMode;
    function setExternalAudioSource(enabled, sampleRate, channels) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_EXTERNAL_AUDIO_SOURCE, {
            enabled: enabled,
            sampleRate: sampleRate,
            channels: channels
        });
    }
    agora.setExternalAudioSource = setExternalAudioSource;
    function setExternalAudioSink(enabled, sampleRate, channels) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_EXTERNAL_AUDIO_SINK, {
            enabled: enabled,
            sampleRate: sampleRate,
            channels: channels
        });
    }
    agora.setExternalAudioSink = setExternalAudioSink;
    function setRecordingAudioFrameParameters(sampleRate, channel, mode, samplesPerCall) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_RECORDING_AUDIO_FRAME_PARAMETERS, {
            sampleRate: sampleRate,
            channel: channel,
            mode: mode,
            samplesPerCall: samplesPerCall
        });
    }
    function setPlaybackAudioFrameParameters(sampleRate, channel, mode, samplesPerCall) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_PLAYBACK_AUDIO_FRAME_PARAMETERS, {
            sampleRate: sampleRate,
            channel: channel,
            mode: mode,
            samplesPerCall: samplesPerCall
        });
    }
    function setMixedAudioFrameParameters(sampleRate, samplesPerCall) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethodAudioEffect(agora.API_TYPE_AUDIO_EFFECT.SET_MIXED_AUDIO_FRAME_PARAMETERS, {
            sampleRate: sampleRate,
            samplesPerCall: samplesPerCall
        });
    }
    function adjustRecordingSignalVolume(volume) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ADJUST_RECORDING_SIGNAL_VOLUME, { volume: volume });
    }
    agora.adjustRecordingSignalVolume = adjustRecordingSignalVolume;
    function adjustPlaybackSignalVolume(volume) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ADJUST_PLAYBACK_SIGNAL_VOLUME, { volume: volume });
    }
    agora.adjustPlaybackSignalVolume = adjustPlaybackSignalVolume;
    function enableWebSdkInteroperability(enabled) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_WEB_SDK_INTEROPER_ABILITY, { enabled: enabled });
    }
    agora.enableWebSdkInteroperability = enableWebSdkInteroperability;
    function setVideoQualityParameters(preferFrameRateOverImageQuality) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_VIDEO_QUALITY_PARAMETERS, { preferFrameRateOverImageQuality: preferFrameRateOverImageQuality });
    }
    agora.setVideoQualityParameters = setVideoQualityParameters;
    function setLocalPublishFallbackOption(option) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_LOCAL_PUBLISH_FALLBACK_OPTION, { option: option });
    }
    agora.setLocalPublishFallbackOption = setLocalPublishFallbackOption;
    function setRemoteSubscribeFallbackOption(option) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_REMOTE_SUBSCRIBE_FALLBACK_OPTION, { option: option });
    }
    agora.setRemoteSubscribeFallbackOption = setRemoteSubscribeFallbackOption;
    function switchCamera(direction) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        if (direction === undefined) {
            return callNativeMethod(agora.API_TYPE.SWITCH_CAMERA);
        }
        return callNativeMethod(agora.API_TYPE.SWITCH_CAMERA_2, { direction: direction });
    }
    agora.switchCamera = switchCamera;
    function setDefaultAudioRouteToSpeakerphone(defaultToSpeaker) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_DEFAULT_AUDIO_ROUTE_SPEAKER_PHONE, { defaultToSpeaker: defaultToSpeaker });
    }
    agora.setDefaultAudioRouteToSpeakerphone = setDefaultAudioRouteToSpeakerphone;
    function setEnableSpeakerphone(speakerOn) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_ENABLE_SPEAKER_PHONE, { speakerOn: speakerOn });
    }
    agora.setEnableSpeakerphone = setEnableSpeakerphone;
    function enableInEarMonitoring(enabled) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_IN_EAR_MONITORING, { enabled: enabled });
    }
    agora.enableInEarMonitoring = enableInEarMonitoring;
    function setInEarMonitoringVolume(volume) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_IN_EAR_MONITORING_VOLUME, { volume: volume });
    }
    agora.setInEarMonitoringVolume = setInEarMonitoringVolume;
    function isSpeakerphoneEnabled() {
        if (isWeb) {
            return false;
        }
        return callNativeMethod(agora.API_TYPE.IS_SPEAKER_PHONE_ENABLED);
    }
    agora.isSpeakerphoneEnabled = isSpeakerphoneEnabled;
    function getCallId() {
        if (isWeb) {
            return null;
        }
        return callNativeMethod(agora.API_TYPE.GET_CALL_ID);
    }
    agora.getCallId = getCallId;
    function rate(callId, rating, description) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.RATE, { callId: callId, rating: rating, description: description });
    }
    agora.rate = rate;
    function complain(callId, description) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.COMPLAIN, { callId: callId, description: description });
    }
    agora.complain = complain;
    function getVersion() {
        if (isWeb) {
            return AgoraRTC.VERSION;
        }
        return callNativeMethod(agora.API_TYPE.GET_VERSION);
    }
    agora.getVersion = getVersion;
    function enableLastmileTest() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_LAST_MILE_TEST);
    }
    agora.enableLastmileTest = enableLastmileTest;
    function disableLastmileTest() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.DISABLE_LAST_MILE_TEST);
    }
    agora.disableLastmileTest = disableLastmileTest;
    function startLastmileProbeTest(config) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.START_LAST_MILE_PROBE_TEST, { config: config });
    }
    agora.startLastmileProbeTest = startLastmileProbeTest;
    function stopLastmileProbeTest() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.STOP_LAST_MILE_PROBE_TEST);
    }
    agora.stopLastmileProbeTest = stopLastmileProbeTest;
    function getErrorDescription(code) {
        if (isWeb) {
            return null;
        }
        return callNativeMethod(agora.API_TYPE.GET_ERROR_DESCRIPTION, { code: code });
    }
    agora.getErrorDescription = getErrorDescription;
    function setEncryptionSecret(secret) {
        if (isWeb) {
            client.setEncryptionSecret(secret);
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.SET_ENCRYPTION_SECTRT, { secret: secret });
    }
    agora.setEncryptionSecret = setEncryptionSecret;
    function setEncryptionMode(encryptionMode) {
        if (isWeb) {
            client.setEncryptionMode(encryptionMode);
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.SET_ENCRYPTION_MODE, { encryptionMode: encryptionMode });
    }
    agora.setEncryptionMode = setEncryptionMode;
    function enableEncryption(enabled, config) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ENABLE_ENCRYPTION, { enabled: enabled, config: config });
    }
    agora.enableEncryption = enableEncryption;
    function registerPacketObserver(observer) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.REGISTER_PACKET_OBSERVER, { observer: observer });
    }
    agora.registerPacketObserver = registerPacketObserver;
    function createDataStream(streamId, reliable, ordered) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.CREATE_DATA_STREAM, { streamId: streamId, reliable: reliable, ordered: ordered });
    }
    agora.createDataStream = createDataStream;
    function sendStreamMessage(streamId, data, length) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SEND_STREAM_MESSAGE, { streamId: streamId, length: length }, data);
    }
    agora.sendStreamMessage = sendStreamMessage;
    function addPublishStreamUrl(url, transcodingEnabled) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ADD_PUBLISH_STREAM_URL, { url: url, transcodingEnabled: transcodingEnabled });
    }
    agora.addPublishStreamUrl = addPublishStreamUrl;
    function removePublishStreamUrl(url) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.REMOVE_PUBLISH_STREAM_URL, { url: url });
    }
    agora.removePublishStreamUrl = removePublishStreamUrl;
    function setLiveTranscoding(transcoding) {
        if (isWeb) {
            var coding = {
                audioBitrate: transcoding.audioBitrate,
                audioChannels: transcoding.audioChannels,
                audioSampleRate: transcoding.audioSampleRate,
                backgroundColor: transcoding.backgroundColor,
                height: transcoding.height,
                images: [transcoding.watermark],
                lowLatency: transcoding.lowLatency,
                transcodingUsers: transcoding.transcodingUsers,
                userCount: transcoding.userCount,
                videoBitrate: transcoding.videoBitrate,
                videoCodecProfile: transcoding.videoCodecProfile,
                videoFramerate: transcoding.videoFramerate,
                videoGop: transcoding.videoGop,
                width: transcoding.width,
            };
            client.setLiveTranscoding(coding);
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.SET_LIVE_TRANSCODING, { transcoding: transcoding });
    }
    agora.setLiveTranscoding = setLiveTranscoding;
    function addVideoWatermark(watermarkUrl, options) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.ADD_VIDEO_WATER_MARK_2, { watermarkUrl: watermarkUrl, options: options });
    }
    agora.addVideoWatermark = addVideoWatermark;
    function clearVideoWatermarks() {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.CLEAR_VIDEO_WATER_MARKS);
    }
    agora.clearVideoWatermarks = clearVideoWatermarks;
    function setBeautyEffectOptions(enabled, options) {
        if (isWeb) {
            if (localStream === undefined) {
                return agora.ERROR_CODE_TYPE.ERR_NOT_INITIALIZED;
            }
            else {
                localStream.setBeautyEffectOptions(enabled, options);
                return agora.ERROR_CODE_TYPE.ERR_OK;
            }
        }
        return callNativeMethod(agora.API_TYPE.SET_BEAUTY_EFFECT_OPTIONS, { enabled: enabled, options: options });
    }
    agora.setBeautyEffectOptions = setBeautyEffectOptions;
    function addInjectStreamUrl(url, config) {
        if (isWeb) {
            client.addInjectStreamUrl(url, config);
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.ADD_INJECT_STREAM_URL, { url: url, config: config });
    }
    agora.addInjectStreamUrl = addInjectStreamUrl;
    function startChannelMediaRelay(configuration) {
        if (isWeb) {
            var config_1 = new AgoraRTC.ChannelMediaRelayConfiguration();
            config_1.setSrcChannelInfo(configuration.srcInfo);
            configuration.destInfos.map(function (value) {
                config_1.setDestChannelInfo(value.channelName, value);
            });
            client.startChannelMediaRelay(config_1, function () {
            });
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.START_CHANNEL_MEDIA_RELAY, { configuration: configuration });
    }
    agora.startChannelMediaRelay = startChannelMediaRelay;
    function updateChannelMediaRelay(configuration) {
        if (isWeb) {
            var config_2 = new AgoraRTC.ChannelMediaRelayConfiguration();
            config_2.setSrcChannelInfo(configuration.srcInfo);
            configuration.destInfos.map(function (value) {
                config_2.setDestChannelInfo(value.channelName, value);
            });
            client.updateChannelMediaRelay(config_2, function () {
            });
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.UPDATE_CHANNEL_MEDIA_RELAY, { configuration: configuration });
    }
    agora.updateChannelMediaRelay = updateChannelMediaRelay;
    function stopChannelMediaRelay() {
        if (isWeb) {
            client.stopChannelMediaRelay(function () {
            });
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.STOP_CHANNEL_MEDIA_RELAY);
    }
    agora.stopChannelMediaRelay = stopChannelMediaRelay;
    function removeInjectStreamUrl(url) {
        if (isWeb) {
            client.removeInjectStreamUrl(url);
            return agora.ERROR_CODE_TYPE.ERR_OK;
        }
        return callNativeMethod(agora.API_TYPE.REMOVE_INJECT_STREAM_URL, { url: url });
    }
    agora.removeInjectStreamUrl = removeInjectStreamUrl;
    function sendCustomReportMessage(id, category, event, label, value) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SEND_CUSTOM_REPORT_MESSAGE, { id: id, category: category, event: event, label: label, value: value });
    }
    agora.sendCustomReportMessage = sendCustomReportMessage;
    function getConnectionState() {
        if (isWeb) {
            var state = {
                'DISCONNECTED': agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED,
                'CONNECTING': agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTING,
                'CONNECTED': agora.CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED,
                'DISCONNECTING': undefined,
            };
            return state[client.getConnectionState()];
        }
        return callNativeMethod(agora.API_TYPE.GET_CONNECTION_STATE);
    }
    agora.getConnectionState = getConnectionState;
    function sendMetadata(_a) {
        var uid = _a.uid, size = _a.size, buffer = _a.buffer, timeStampMs = _a.timeStampMs;
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SEND_METADATA, { uid: uid, size: size, timeStampMs: timeStampMs }, buffer);
    }
    agora.sendMetadata = sendMetadata;
    function setMaxMetadataSize(size) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_MAX_META_SIZE, { size: size });
    }
    agora.setMaxMetadataSize = setMaxMetadataSize;
    function registerMediaMetadataObserver(type) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.REGISTER_MEDIA_META_DATA_OBSERVER, { type: type });
    }
    agora.registerMediaMetadataObserver = registerMediaMetadataObserver;
    function setParameters(parameters) {
        if (isWeb) {
            return agora.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED;
        }
        return callNativeMethod(agora.API_TYPE.SET_PARAMETERS, { parameters: parameters });
    }
    agora.setParameters = setParameters;
})(agora || (agora = {}));
window.agora = agora;
